
_misProgramas/protocolosDeComunicacion/oledSSD1306_128x64/out/oledSSD1306_128x64.elf:     file format elf32-littlearm
_misProgramas/protocolosDeComunicacion/oledSSD1306_128x64/out/oledSSD1306_128x64.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00091d

Program Header:
0x70000001 off    0x000125b0 vaddr 0x1a0025b0 paddr 0x1a0025b0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000878 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000025b8 memsz 0x000025b8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0025b8 align 2**16
         filesz 0x00000850 memsz 0x00000850 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025ac  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000850  10000000  1a0025b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020850  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020850  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020850  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020850  2**2
                  CONTENTS
  6 .bss          00000028  10000850  10000850  00000850  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020850  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020850  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020850  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020850  2**2
                  CONTENTS
 11 .init_array   00000004  1a0025ac  1a0025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0025b0  1a0025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020850  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020850  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020850  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020850  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020850  2**2
                  CONTENTS
 18 .noinit       00000000  10000878  10000878  00020850  2**2
                  CONTENTS
 19 .debug_info   0001dc75  00000000  00000000  00020850  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003f56  00000000  00000000  0003e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007d5b  00000000  00000000  0004241b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a98  00000000  00000000  0004a176  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000a80  00000000  00000000  0004ac0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00005dd8  00000000  00000000  0004b68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000d73a  00000000  00000000  00051466  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000282ab  00000000  00000000  0005eba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  00086e4b  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00086eca  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001b54  00000000  00000000  00086f04  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000850 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0025ac l    d  .init_array	00000000 .init_array
1a0025b0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000878 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 oled.c
10000004 l     O .data	00000800 ssd1306_buffer
00000000 l    df *ABS*	00000000 prueba1.c
00000000 l    df *ABS*	00000000 board.c
1a0009a8 l     F .text	00000044 Board_LED_Init
1a0009ec l     F .text	00000040 Board_TEC_Init
1a000a2c l     F .text	00000040 Board_GPIO_Init
1a000a6c l     F .text	00000030 Board_ADC_Init
1a000a9c l     F .text	00000038 Board_SPI_Init
1a000ad4 l     F .text	00000024 Board_I2C_Init
1a002350 l     O .text	00000008 GpioButtons
1a002358 l     O .text	0000000c GpioLeds
1a002364 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00237c l     O .text	00000004 InitClkStates
1a002380 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000c04 l     F .text	0000002c Chip_UART_GetIndex
1a0023f4 l     O .text	00000008 UART_BClock
1a0023fc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000d6c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000d80 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000e34 l     F .text	000000a4 pll_calc_divs
1a000ed8 l     F .text	0000010c pll_get_frac
1a000fe4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001258 l     F .text	00000022 Chip_Clock_GetDivRate
10000854 l     O .bss	00000008 audio_usb_pll_freq
1a002410 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00247c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00165c l     F .text	00000014 Chip_SSP_GetClockIndex
1a001670 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000808 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000840 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
1000085c l     O .bss	00000004 callBackFuncParams
10000860 l     O .bss	00000008 tickCounter
10000868 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a001a84 l     F .text	00000030 i2cHardwareInit
1a001ab4 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001b18 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000086c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a0025b0 l       .init_array	00000000 __init_array_end
1a0025ac l       .bss_RAM5	00000000 __preinit_array_end
1a0025ac l       .init_array	00000000 __init_array_start
1a0025ac l       .bss_RAM5	00000000 __preinit_array_start
1a00107c g     F .text	0000001c Chip_Clock_GetDividerSource
1a001628 g     F .text	0000000e Chip_I2CM_Xfer
1a000634 g     F .text	0000001c SSD1306_GotoXY
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a001af0 g     F .text	0000000e i2cInit
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000b4c g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a001730 g     F .text	00000120 handleMasterXferState
1a000660 g     F .text	000001d0 SSD1306_Print
1a000000 g       *ABS*	00000000 __vectors_start__
1a000e26 g     F .text	0000000c Chip_ADC_SetResolution
1a0004e4 g     F .text	0000001c SSD1306_ClearDisplay
1a001a50 g     F .text	00000034 SysTick_Handler
1a000918  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0025b8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6f72 g       *ABS*	00000000 __valid_user_code_checksum
1a0025b8 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0012fa g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0018dc g     F .text	00000030 Chip_I2C_MasterStateHandler
1a001dc0 g     F .text	00000000 .hidden __aeabi_uldivmod
10000878 g       .noinit	00000000 _noinit
10000870 g     O .bss	00000004 SystemCoreClock
1a000c30 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001378 g     F .text	0000004c Chip_Clock_GetRate
1a000500 g     F .text	000000e4 SSD1306_DrawLine
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000b8c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0018ac g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a001df0 g     F .text	000002cc .hidden __udivmoddi4
1a00234c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
10000000 g     O .data	00000002 _i2caddr
1a0025b0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0020c0 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000b1c g     F .text	00000030 Board_Init
1a0009a6  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0005e4 g     F .text	0000001e SSD1306_DrawFastVLine
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000878 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000602 g     F .text	00000030 SSD1306_FillRect
1a00091c g     F .text	00000088 Reset_Handler
1a0019d4 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001636 g     F .text	00000024 Chip_I2CM_XferBlocking
1a001874 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001030 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000470 g     F .text	00000074 SSD1306_Display
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a001850 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0011ec g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0024c4 g     O .text	000000e6 gpioPinsInit
1a001688 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0012d4 g     F .text	00000026 Chip_Clock_GetBaseClock
10000850 g       .bss	00000000 _bss
1a000df4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00169a g     F .text	0000003e Chip_SSP_SetBitRate
1a00165a g     F .text	00000002 Chip_GPIO_Init
1a002378 g     O .text	00000004 OscRateIn
10000878 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
10000850 g     O .bss	00000002 x_pos
1a001b4c g     F .text	000001ac gpioInit
1a000300 g     F .text	00000028 ssd1306_command
1a0020bc  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001cf8 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00190c g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001098 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002108 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000850 g     F .text	000000c8 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001308 g     F .text	0000003c Chip_Clock_EnableOpts
1a0010b4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000650 g     F .text	00000010 SSD1306_TextSize
1a00116c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
10000804 g     O .data	00000002 text_size
1a00195c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001d88 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0009a4  w    F .text	00000002 _fini
1a000830 g     F .text	00000020 SSD1306_DrawText
1a000db4 g     F .text	00000040 Chip_ADC_Init
10000874 g     O .bss	00000004 g_pUsbApi
1a000b54 g     F .text	00000038 Board_SetupMuxing
1a000c84 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0019b0 g     F .text	0000000c tickRead
1a000424 g     F .text	0000004c SSD1306_DrawPixel
10000848 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00152c g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
10000878 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0016d8 g     F .text	00000038 Chip_SSP_Init
1a001924 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001afe g     F .text	00000018 i2cWrite
1a000af8 g     F .text	00000024 Board_Debug_Init
10000850 g       .data	00000000 _edata
1a001710 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000806 g     O .data	00000001 wrap
1a0021f4 g     O .text	000000ff Font2
1a0013d8 g     F .text	00000154 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a0013c4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a000328 g     F .text	000000fc SSD1306_Begin
1a0020bc  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001344 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001d14 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
10000002 g     O .data	00000002 _vccstate
10000852 g     O .bss	00000002 y_pos
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0019bc g     F .text	00000018 tickPowerSet
1a002118 g     O .text	000000dc Font
1a00127c g     F .text	00000058 Chip_Clock_SetBaseClock
1a001994 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000bf8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 1d 09 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 72 6f ff 53     }...........ro.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	51 1a 00 1a                                         Q...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	f9 1c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0025b8 	.word	0x1a0025b8
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000850 	.word	0x00000850
1a000120:	1a0025b8 	.word	0x1a0025b8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0025b8 	.word	0x1a0025b8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0025b8 	.word	0x1a0025b8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0025b8 	.word	0x1a0025b8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000850 	.word	0x10000850
1a000154:	00000028 	.word	0x00000028
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ssd1306_command>:
//--------------------------------------------------------------------------//



void ssd1306_command(uint16_t c)
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b084      	sub	sp, #16
    I2C_Write(SSD1306_STREAM, control);
    I2C_Write(SSD1306_STREAM, c);
    I2C_Stop(SSD1306_STREAM);
	 */
	uint16_t transmitDataBuffer[2];
	transmitDataBuffer[0] = control;
1a000304:	2400      	movs	r4, #0
1a000306:	f8ad 400c 	strh.w	r4, [sp, #12]
	transmitDataBuffer[1] = c;
1a00030a:	f8ad 000e 	strh.w	r0, [sp, #14]
	i2cWrite( I2C0, _i2caddr, transmitDataBuffer, 2, TRUE );
1a00030e:	4b05      	ldr	r3, [pc, #20]	; (1a000324 <ssd1306_command+0x24>)
1a000310:	7819      	ldrb	r1, [r3, #0]
1a000312:	2301      	movs	r3, #1
1a000314:	9300      	str	r3, [sp, #0]
1a000316:	2302      	movs	r3, #2
1a000318:	aa03      	add	r2, sp, #12
1a00031a:	4620      	mov	r0, r4
1a00031c:	f001 fbef 	bl	1a001afe <i2cWrite>
}
1a000320:	b004      	add	sp, #16
1a000322:	bd10      	pop	{r4, pc}
1a000324:	10000000 	.word	0x10000000

1a000328 <SSD1306_Begin>:

//Capaz deba hardcorear la funcion Begin con los parametros
//vccstate = SSD1306_SWITCHCAPVCC y i2caddr = SSD1306_I2C_ADDRESS

void SSD1306_Begin(uint16_t vccstate, uint16_t i2caddr)
{
1a000328:	b510      	push	{r4, lr}
1a00032a:	4604      	mov	r4, r0
	_vccstate = vccstate;
1a00032c:	4b38      	ldr	r3, [pc, #224]	; (1a000410 <SSD1306_Begin+0xe8>)
1a00032e:	8018      	strh	r0, [r3, #0]
	_i2caddr  = i2caddr;
1a000330:	4b38      	ldr	r3, [pc, #224]	; (1a000414 <SSD1306_Begin+0xec>)
1a000332:	8019      	strh	r1, [r3, #0]
	delay(10);
1a000334:	200a      	movs	r0, #10
1a000336:	2100      	movs	r1, #0
1a000338:	f001 fd26 	bl	1a001d88 <delay>
	delay_ms(10);
	output_high(SSD1306_RST);
#endif

	// Init sequence
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
1a00033c:	20ae      	movs	r0, #174	; 0xae
1a00033e:	f7ff ffdf 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
1a000342:	20d5      	movs	r0, #213	; 0xd5
1a000344:	f7ff ffdc 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0x80);                                  // the suggested ratio 0x80
1a000348:	2080      	movs	r0, #128	; 0x80
1a00034a:	f7ff ffd9 	bl	1a000300 <ssd1306_command>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
1a00034e:	20a8      	movs	r0, #168	; 0xa8
1a000350:	f7ff ffd6 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_LCDHEIGHT - 1);
1a000354:	203f      	movs	r0, #63	; 0x3f
1a000356:	f7ff ffd3 	bl	1a000300 <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
1a00035a:	20d3      	movs	r0, #211	; 0xd3
1a00035c:	f7ff ffd0 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
1a000360:	2000      	movs	r0, #0
1a000362:	f7ff ffcd 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
1a000366:	2040      	movs	r0, #64	; 0x40
1a000368:	f7ff ffca 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
1a00036c:	208d      	movs	r0, #141	; 0x8d
1a00036e:	f7ff ffc7 	bl	1a000300 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC)
1a000372:	2c01      	cmp	r4, #1
1a000374:	d03f      	beq.n	1a0003f6 <SSD1306_Begin+0xce>
	{ ssd1306_command(0x10); }
	else
	{ ssd1306_command(0x14); }
1a000376:	2014      	movs	r0, #20
1a000378:	f7ff ffc2 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
1a00037c:	2020      	movs	r0, #32
1a00037e:	f7ff ffbf 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0x00);                                  // 0x0 act like ks0108
1a000382:	2000      	movs	r0, #0
1a000384:	f7ff ffbc 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
1a000388:	20a1      	movs	r0, #161	; 0xa1
1a00038a:	f7ff ffb9 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);
1a00038e:	20c8      	movs	r0, #200	; 0xc8
1a000390:	f7ff ffb6 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0x02);
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
	ssd1306_command(0x8F);

#elif defined SSD1306_128_64
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
1a000394:	20da      	movs	r0, #218	; 0xda
1a000396:	f7ff ffb3 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0x12);
1a00039a:	2012      	movs	r0, #18
1a00039c:	f7ff ffb0 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
1a0003a0:	2081      	movs	r0, #129	; 0x81
1a0003a2:	f7ff ffad 	bl	1a000300 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC)
1a0003a6:	2c01      	cmp	r4, #1
1a0003a8:	d029      	beq.n	1a0003fe <SSD1306_Begin+0xd6>
	{ ssd1306_command(0x9F); }
	else
	{ ssd1306_command(0xCF); }
1a0003aa:	20cf      	movs	r0, #207	; 0xcf
1a0003ac:	f7ff ffa8 	bl	1a000300 <ssd1306_command>
	else
	{ ssd1306_command(0xAF); }

#endif

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
1a0003b0:	20d9      	movs	r0, #217	; 0xd9
1a0003b2:	f7ff ffa5 	bl	1a000300 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC)
1a0003b6:	2c01      	cmp	r4, #1
1a0003b8:	d025      	beq.n	1a000406 <SSD1306_Begin+0xde>
	{ ssd1306_command(0x22); }
	else
	{ ssd1306_command(0xF1); }
1a0003ba:	20f1      	movs	r0, #241	; 0xf1
1a0003bc:	f7ff ffa0 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
1a0003c0:	20db      	movs	r0, #219	; 0xdb
1a0003c2:	f7ff ff9d 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0x40);
1a0003c6:	2040      	movs	r0, #64	; 0x40
1a0003c8:	f7ff ff9a 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
1a0003cc:	20a4      	movs	r0, #164	; 0xa4
1a0003ce:	f7ff ff97 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
1a0003d2:	20a6      	movs	r0, #166	; 0xa6
1a0003d4:	f7ff ff94 	bl	1a000300 <ssd1306_command>

	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
1a0003d8:	202e      	movs	r0, #46	; 0x2e
1a0003da:	f7ff ff91 	bl	1a000300 <ssd1306_command>

	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
1a0003de:	20af      	movs	r0, #175	; 0xaf
1a0003e0:	f7ff ff8e 	bl	1a000300 <ssd1306_command>

	// set cursor to (0, 0)
	x_pos = 0;
1a0003e4:	2300      	movs	r3, #0
1a0003e6:	4a0c      	ldr	r2, [pc, #48]	; (1a000418 <SSD1306_Begin+0xf0>)
1a0003e8:	8013      	strh	r3, [r2, #0]
	y_pos = 0;
1a0003ea:	4a0c      	ldr	r2, [pc, #48]	; (1a00041c <SSD1306_Begin+0xf4>)
1a0003ec:	8013      	strh	r3, [r2, #0]
	// set text size to 1
	text_size = 1;
1a0003ee:	4b0c      	ldr	r3, [pc, #48]	; (1a000420 <SSD1306_Begin+0xf8>)
1a0003f0:	2201      	movs	r2, #1
1a0003f2:	801a      	strh	r2, [r3, #0]
}
1a0003f4:	bd10      	pop	{r4, pc}
	{ ssd1306_command(0x10); }
1a0003f6:	2010      	movs	r0, #16
1a0003f8:	f7ff ff82 	bl	1a000300 <ssd1306_command>
1a0003fc:	e7be      	b.n	1a00037c <SSD1306_Begin+0x54>
	{ ssd1306_command(0x9F); }
1a0003fe:	209f      	movs	r0, #159	; 0x9f
1a000400:	f7ff ff7e 	bl	1a000300 <ssd1306_command>
1a000404:	e7d4      	b.n	1a0003b0 <SSD1306_Begin+0x88>
	{ ssd1306_command(0x22); }
1a000406:	2022      	movs	r0, #34	; 0x22
1a000408:	f7ff ff7a 	bl	1a000300 <ssd1306_command>
1a00040c:	e7d8      	b.n	1a0003c0 <SSD1306_Begin+0x98>
1a00040e:	bf00      	nop
1a000410:	10000002 	.word	0x10000002
1a000414:	10000000 	.word	0x10000000
1a000418:	10000850 	.word	0x10000850
1a00041c:	10000852 	.word	0x10000852
1a000420:	10000804 	.word	0x10000804

1a000424 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, bool_t color)
{
	if ((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT))
1a000424:	287f      	cmp	r0, #127	; 0x7f
1a000426:	d810      	bhi.n	1a00044a <SSD1306_DrawPixel+0x26>
1a000428:	293f      	cmp	r1, #63	; 0x3f
1a00042a:	d80e      	bhi.n	1a00044a <SSD1306_DrawPixel+0x26>
		return;
	if (color)
1a00042c:	b972      	cbnz	r2, 1a00044c <SSD1306_DrawPixel+0x28>
		ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] |=  (1 << (y & 7));
	else
		ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] &=  ~(1 << (y & 7));
1a00042e:	08cb      	lsrs	r3, r1, #3
1a000430:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
1a000434:	f001 0107 	and.w	r1, r1, #7
1a000438:	2301      	movs	r3, #1
1a00043a:	408b      	lsls	r3, r1
1a00043c:	4a0b      	ldr	r2, [pc, #44]	; (1a00046c <SSD1306_DrawPixel+0x48>)
1a00043e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
1a000442:	ea21 0103 	bic.w	r1, r1, r3
1a000446:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
}
1a00044a:	4770      	bx	lr
		ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] |=  (1 << (y & 7));
1a00044c:	08cb      	lsrs	r3, r1, #3
1a00044e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
1a000452:	f001 0107 	and.w	r1, r1, #7
1a000456:	2301      	movs	r3, #1
1a000458:	fa03 f101 	lsl.w	r1, r3, r1
1a00045c:	4b03      	ldr	r3, [pc, #12]	; (1a00046c <SSD1306_DrawPixel+0x48>)
1a00045e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
1a000462:	4311      	orrs	r1, r2
1a000464:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
1a000468:	4770      	bx	lr
1a00046a:	bf00      	nop
1a00046c:	10000004 	.word	0x10000004

1a000470 <SSD1306_Display>:
	ssd1306_command(SSD1306_SETCONTRAST);
	ssd1306_command(contrast);
}

void SSD1306_Display(void)
{
1a000470:	b510      	push	{r4, lr}
1a000472:	b0c4      	sub	sp, #272	; 0x110
	ssd1306_command(SSD1306_COLUMNADDR);
1a000474:	2021      	movs	r0, #33	; 0x21
1a000476:	f7ff ff43 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0);   // Column start address (0 = reset)
1a00047a:	2000      	movs	r0, #0
1a00047c:	f7ff ff40 	bl	1a000300 <ssd1306_command>
	ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
1a000480:	207f      	movs	r0, #127	; 0x7f
1a000482:	f7ff ff3d 	bl	1a000300 <ssd1306_command>

	ssd1306_command(SSD1306_PAGEADDR);
1a000486:	2022      	movs	r0, #34	; 0x22
1a000488:	f7ff ff3a 	bl	1a000300 <ssd1306_command>
	ssd1306_command(0); // Page start address (0 = reset)
1a00048c:	2000      	movs	r0, #0
1a00048e:	f7ff ff37 	bl	1a000300 <ssd1306_command>
#if SSD1306_LCDHEIGHT == 64
	ssd1306_command(7); // Page end address
1a000492:	2007      	movs	r0, #7
1a000494:	f7ff ff34 	bl	1a000300 <ssd1306_command>

		uint16_t length = (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8);
		uint16_t transmitDataBuffer2[129];


		for(int16_t i=0;i<length;i++){
1a000498:	2400      	movs	r4, #0
1a00049a:	e014      	b.n	1a0004c6 <SSD1306_Display+0x56>

			int16_t j = 0;
			transmitDataBuffer2[j] = SSD1306_SETSTARTLINE;
			for(j=1;j<129;j++){

				transmitDataBuffer2[j] = ssd1306_buffer[i];
1a00049c:	4a0f      	ldr	r2, [pc, #60]	; (1a0004dc <SSD1306_Display+0x6c>)
1a00049e:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
1a0004a2:	aa03      	add	r2, sp, #12
1a0004a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				i++;
1a0004a8:	3401      	adds	r4, #1
1a0004aa:	b224      	sxth	r4, r4
			for(j=1;j<129;j++){
1a0004ac:	3301      	adds	r3, #1
1a0004ae:	b21b      	sxth	r3, r3
1a0004b0:	2b80      	cmp	r3, #128	; 0x80
1a0004b2:	ddf3      	ble.n	1a00049c <SSD1306_Display+0x2c>
			}

			i--;
			i2cWrite( I2C0, _i2caddr, transmitDataBuffer2, 129, TRUE );
1a0004b4:	4b0a      	ldr	r3, [pc, #40]	; (1a0004e0 <SSD1306_Display+0x70>)
1a0004b6:	7819      	ldrb	r1, [r3, #0]
1a0004b8:	2301      	movs	r3, #1
1a0004ba:	9300      	str	r3, [sp, #0]
1a0004bc:	2381      	movs	r3, #129	; 0x81
1a0004be:	aa03      	add	r2, sp, #12
1a0004c0:	2000      	movs	r0, #0
1a0004c2:	f001 fb1c 	bl	1a001afe <i2cWrite>
		for(int16_t i=0;i<length;i++){
1a0004c6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
1a0004ca:	da04      	bge.n	1a0004d6 <SSD1306_Display+0x66>
			transmitDataBuffer2[j] = SSD1306_SETSTARTLINE;
1a0004cc:	2340      	movs	r3, #64	; 0x40
1a0004ce:	f8ad 300c 	strh.w	r3, [sp, #12]
			for(j=1;j<129;j++){
1a0004d2:	2301      	movs	r3, #1
1a0004d4:	e7ec      	b.n	1a0004b0 <SSD1306_Display+0x40>
		//for (uint16_t x = 0; x < 16; x++) {
		//	I2C_Write(SSD1306_STREAM, ssd1306_buffer[i]);
		//i2cWrite( I2C0, _i2caddr, ssd1306_buffer[i], 1, TRUE );
		//i++;

	}
1a0004d6:	b044      	add	sp, #272	; 0x110
1a0004d8:	bd10      	pop	{r4, pc}
1a0004da:	bf00      	nop
1a0004dc:	10000004 	.word	0x10000004
1a0004e0:	10000000 	.word	0x10000000

1a0004e4 <SSD1306_ClearDisplay>:
//}


void SSD1306_ClearDisplay(void)
{
	for (uint16_t i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++)
1a0004e4:	2300      	movs	r3, #0
1a0004e6:	e005      	b.n	1a0004f4 <SSD1306_ClearDisplay+0x10>
		ssd1306_buffer[i] = 0;
1a0004e8:	4a04      	ldr	r2, [pc, #16]	; (1a0004fc <SSD1306_ClearDisplay+0x18>)
1a0004ea:	2100      	movs	r1, #0
1a0004ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++)
1a0004f0:	3301      	adds	r3, #1
1a0004f2:	b29b      	uxth	r3, r3
1a0004f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
1a0004f8:	d3f6      	bcc.n	1a0004e8 <SSD1306_ClearDisplay+0x4>
}
1a0004fa:	4770      	bx	lr
1a0004fc:	10000004 	.word	0x10000004

1a000500 <SSD1306_DrawLine>:

void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, bool_t color)
{
1a000500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000504:	b083      	sub	sp, #12
1a000506:	460f      	mov	r7, r1
1a000508:	4616      	mov	r6, r2
1a00050a:	461d      	mov	r5, r3
1a00050c:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	bool_t steep;
	int8_t ystep;
	uint16_t dx, dy;
	int16_t err;
	steep = abs(y1 - y0) > abs(x1 - x0);
1a000510:	eba3 0901 	sub.w	r9, r3, r1
1a000514:	f1b9 0f00 	cmp.w	r9, #0
1a000518:	bfb8      	it	lt
1a00051a:	f1c9 0900 	rsblt	r9, r9, #0
1a00051e:	eba2 0a00 	sub.w	sl, r2, r0
1a000522:	f1ba 0f00 	cmp.w	sl, #0
1a000526:	bfb8      	it	lt
1a000528:	f1ca 0a00 	rsblt	sl, sl, #0
	if (steep) {
1a00052c:	45d1      	cmp	r9, sl
1a00052e:	dc03      	bgt.n	1a000538 <SSD1306_DrawLine+0x38>
1a000530:	4615      	mov	r5, r2
1a000532:	461e      	mov	r6, r3
1a000534:	4607      	mov	r7, r0
1a000536:	4608      	mov	r0, r1
		ssd1306_swap(x0, y0);
		ssd1306_swap(x1, y1);
	}
	if (x0 > x1) {
1a000538:	42af      	cmp	r7, r5
1a00053a:	dc05      	bgt.n	1a000548 <SSD1306_DrawLine+0x48>
1a00053c:	4633      	mov	r3, r6
1a00053e:	4606      	mov	r6, r0
1a000540:	4618      	mov	r0, r3
1a000542:	462b      	mov	r3, r5
1a000544:	463d      	mov	r5, r7
1a000546:	461f      	mov	r7, r3
		ssd1306_swap(x0, x1);
		ssd1306_swap(y0, y1);
	}
	dx = x1 - x0;
1a000548:	b2bb      	uxth	r3, r7
1a00054a:	b2aa      	uxth	r2, r5
1a00054c:	1a9b      	subs	r3, r3, r2
1a00054e:	b29b      	uxth	r3, r3
1a000550:	9300      	str	r3, [sp, #0]
	dy = abs(y1 - y0);
1a000552:	eba0 0806 	sub.w	r8, r0, r6
1a000556:	f1b8 0f00 	cmp.w	r8, #0
1a00055a:	bfb8      	it	lt
1a00055c:	f1c8 0800 	rsblt	r8, r8, #0
1a000560:	fa1f f888 	uxth.w	r8, r8

	err = dx / 2;
1a000564:	085c      	lsrs	r4, r3, #1
	if (y0 < y1)
1a000566:	4286      	cmp	r6, r0
1a000568:	db33      	blt.n	1a0005d2 <SSD1306_DrawLine+0xd2>
		ystep = 1;
	else
		ystep = -1;
1a00056a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00056e:	9301      	str	r3, [sp, #4]
1a000570:	465b      	mov	r3, fp
1a000572:	46bb      	mov	fp, r7
1a000574:	461f      	mov	r7, r3
1a000576:	e00c      	b.n	1a000592 <SSD1306_DrawLine+0x92>

	for (; x0 <= x1; x0++) {
		if (steep) {
			if(color) SSD1306_DrawPixel(y0, x0, color);
			else      SSD1306_DrawPixel(y0, x0, FALSE);
1a000578:	2200      	movs	r2, #0
1a00057a:	b2a9      	uxth	r1, r5
1a00057c:	b2b0      	uxth	r0, r6
1a00057e:	f7ff ff51 	bl	1a000424 <SSD1306_DrawPixel>
		}
		else {
			if(color) SSD1306_DrawPixel(x0, y0, color);
			else      SSD1306_DrawPixel(x0, y0, FALSE);
		}
		err -= dy;
1a000582:	eba4 0408 	sub.w	r4, r4, r8
1a000586:	b2a3      	uxth	r3, r4
1a000588:	b21c      	sxth	r4, r3
		if (err < 0) {
1a00058a:	2c00      	cmp	r4, #0
1a00058c:	db1a      	blt.n	1a0005c4 <SSD1306_DrawLine+0xc4>
	for (; x0 <= x1; x0++) {
1a00058e:	3501      	adds	r5, #1
1a000590:	b22d      	sxth	r5, r5
1a000592:	455d      	cmp	r5, fp
1a000594:	dc23      	bgt.n	1a0005de <SSD1306_DrawLine+0xde>
		if (steep) {
1a000596:	45d1      	cmp	r9, sl
1a000598:	dd07      	ble.n	1a0005aa <SSD1306_DrawLine+0xaa>
			if(color) SSD1306_DrawPixel(y0, x0, color);
1a00059a:	2f00      	cmp	r7, #0
1a00059c:	d0ec      	beq.n	1a000578 <SSD1306_DrawLine+0x78>
1a00059e:	463a      	mov	r2, r7
1a0005a0:	b2a9      	uxth	r1, r5
1a0005a2:	b2b0      	uxth	r0, r6
1a0005a4:	f7ff ff3e 	bl	1a000424 <SSD1306_DrawPixel>
1a0005a8:	e7eb      	b.n	1a000582 <SSD1306_DrawLine+0x82>
			if(color) SSD1306_DrawPixel(x0, y0, color);
1a0005aa:	b12f      	cbz	r7, 1a0005b8 <SSD1306_DrawLine+0xb8>
1a0005ac:	463a      	mov	r2, r7
1a0005ae:	b2b1      	uxth	r1, r6
1a0005b0:	b2a8      	uxth	r0, r5
1a0005b2:	f7ff ff37 	bl	1a000424 <SSD1306_DrawPixel>
1a0005b6:	e7e4      	b.n	1a000582 <SSD1306_DrawLine+0x82>
			else      SSD1306_DrawPixel(x0, y0, FALSE);
1a0005b8:	2200      	movs	r2, #0
1a0005ba:	b2b1      	uxth	r1, r6
1a0005bc:	b2a8      	uxth	r0, r5
1a0005be:	f7ff ff31 	bl	1a000424 <SSD1306_DrawPixel>
1a0005c2:	e7de      	b.n	1a000582 <SSD1306_DrawLine+0x82>
			y0  += ystep;
1a0005c4:	9a01      	ldr	r2, [sp, #4]
1a0005c6:	4416      	add	r6, r2
1a0005c8:	b236      	sxth	r6, r6
			err += dx;
1a0005ca:	9a00      	ldr	r2, [sp, #0]
1a0005cc:	189c      	adds	r4, r3, r2
1a0005ce:	b224      	sxth	r4, r4
1a0005d0:	e7dd      	b.n	1a00058e <SSD1306_DrawLine+0x8e>
		ystep = 1;
1a0005d2:	2301      	movs	r3, #1
1a0005d4:	9301      	str	r3, [sp, #4]
1a0005d6:	465b      	mov	r3, fp
1a0005d8:	46bb      	mov	fp, r7
1a0005da:	461f      	mov	r7, r3
1a0005dc:	e7d9      	b.n	1a000592 <SSD1306_DrawLine+0x92>
		}
	}
}
1a0005de:	b003      	add	sp, #12
1a0005e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a0005e4 <SSD1306_DrawFastVLine>:
{
	SSD1306_DrawLine(x, y, x + w - 1, y, color);
}

void SSD1306_DrawFastVLine(uint16_t x, uint16_t y, uint16_t h, bool_t color)
{
1a0005e4:	b500      	push	{lr}
1a0005e6:	b083      	sub	sp, #12
	SSD1306_DrawLine(x, y, x, y + h - 1, color);
1a0005e8:	b200      	sxth	r0, r0
1a0005ea:	440a      	add	r2, r1
1a0005ec:	b292      	uxth	r2, r2
1a0005ee:	3a01      	subs	r2, #1
1a0005f0:	9300      	str	r3, [sp, #0]
1a0005f2:	b213      	sxth	r3, r2
1a0005f4:	4602      	mov	r2, r0
1a0005f6:	b209      	sxth	r1, r1
1a0005f8:	f7ff ff82 	bl	1a000500 <SSD1306_DrawLine>
}
1a0005fc:	b003      	add	sp, #12
1a0005fe:	f85d fb04 	ldr.w	pc, [sp], #4

1a000602 <SSD1306_FillRect>:

void SSD1306_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool_t color)
{
1a000602:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000606:	4605      	mov	r5, r0
1a000608:	4689      	mov	r9, r1
1a00060a:	4616      	mov	r6, r2
1a00060c:	4698      	mov	r8, r3
1a00060e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	for (int16_t i = x; i < x + w; i++)
1a000612:	b200      	sxth	r0, r0
1a000614:	e008      	b.n	1a000628 <SSD1306_FillRect+0x26>
		SSD1306_DrawFastVLine(i, y, h, color);
1a000616:	b284      	uxth	r4, r0
1a000618:	463b      	mov	r3, r7
1a00061a:	4642      	mov	r2, r8
1a00061c:	4649      	mov	r1, r9
1a00061e:	4620      	mov	r0, r4
1a000620:	f7ff ffe0 	bl	1a0005e4 <SSD1306_DrawFastVLine>
	for (int16_t i = x; i < x + w; i++)
1a000624:	1c60      	adds	r0, r4, #1
1a000626:	b200      	sxth	r0, r0
1a000628:	19ab      	adds	r3, r5, r6
1a00062a:	4298      	cmp	r0, r3
1a00062c:	dbf3      	blt.n	1a000616 <SSD1306_FillRect+0x14>
}
1a00062e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000632:	Address 0x000000001a000632 is out of bounds.


1a000634 <SSD1306_GotoXY>:
}

// move cursor to position (x, y)
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
	if((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT))
1a000634:	287f      	cmp	r0, #127	; 0x7f
1a000636:	d805      	bhi.n	1a000644 <SSD1306_GotoXY+0x10>
1a000638:	293f      	cmp	r1, #63	; 0x3f
1a00063a:	d803      	bhi.n	1a000644 <SSD1306_GotoXY+0x10>
		return;
	x_pos = x;
1a00063c:	4b02      	ldr	r3, [pc, #8]	; (1a000648 <SSD1306_GotoXY+0x14>)
1a00063e:	8018      	strh	r0, [r3, #0]
	y_pos = y;
1a000640:	4b02      	ldr	r3, [pc, #8]	; (1a00064c <SSD1306_GotoXY+0x18>)
1a000642:	8019      	strh	r1, [r3, #0]
}
1a000644:	4770      	bx	lr
1a000646:	bf00      	nop
1a000648:	10000850 	.word	0x10000850
1a00064c:	10000852 	.word	0x10000852

1a000650 <SSD1306_TextSize>:

// set text size
void SSD1306_TextSize(uint16_t t_size)
{
	if(t_size < 1)
1a000650:	4603      	mov	r3, r0
1a000652:	b900      	cbnz	r0, 1a000656 <SSD1306_TextSize+0x6>
		t_size = 1;
1a000654:	2301      	movs	r3, #1
	text_size = t_size;
1a000656:	4a01      	ldr	r2, [pc, #4]	; (1a00065c <SSD1306_TextSize+0xc>)
1a000658:	8013      	strh	r3, [r2, #0]
}
1a00065a:	4770      	bx	lr
1a00065c:	10000804 	.word	0x10000804

1a000660 <SSD1306_Print>:
    \b  Move back one position
    \n  Go to start of current line
    \r  Go to line below
 */
void SSD1306_Print(uint16_t c)
{
1a000660:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000662:	b083      	sub	sp, #12
1a000664:	4607      	mov	r7, r0
	bool_t _color;
	uint16_t i, j, line;

	if (c == ' ' && x_pos == 0 && wrap)
1a000666:	2820      	cmp	r0, #32
1a000668:	d00f      	beq.n	1a00068a <SSD1306_Print+0x2a>
		return;
	if(c == '\a') {
1a00066a:	2f07      	cmp	r7, #7
1a00066c:	d017      	beq.n	1a00069e <SSD1306_Print+0x3e>
		x_pos = y_pos = 0;
		return;
	}
	if( (c == '\b') && (x_pos >= text_size * 6) ) {
1a00066e:	2f08      	cmp	r7, #8
1a000670:	d01c      	beq.n	1a0006ac <SSD1306_Print+0x4c>
		x_pos -= text_size * 6;
		return;
	}
	if(c == '\r') {
1a000672:	2f0d      	cmp	r7, #13
1a000674:	d02d      	beq.n	1a0006d2 <SSD1306_Print+0x72>
		x_pos = 0;
		return;
	}
	if(c == '\n') {
1a000676:	2f0a      	cmp	r7, #10
1a000678:	d02f      	beq.n	1a0006da <SSD1306_Print+0x7a>
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
			y_pos = 0;
		return;
	}

	if((c < ' ') || (c > '~'))
1a00067a:	f1a7 0320 	sub.w	r3, r7, #32
1a00067e:	b29b      	uxth	r3, r3
1a000680:	2b5e      	cmp	r3, #94	; 0x5e
1a000682:	d900      	bls.n	1a000686 <SSD1306_Print+0x26>
		c = '?';
1a000684:	273f      	movs	r7, #63	; 0x3f

	for(i = 0; i < 5; i++ ) {
1a000686:	2600      	movs	r6, #0
1a000688:	e071      	b.n	1a00076e <SSD1306_Print+0x10e>
	if (c == ' ' && x_pos == 0 && wrap)
1a00068a:	4b63      	ldr	r3, [pc, #396]	; (1a000818 <SSD1306_Print+0x1b8>)
1a00068c:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000690:	2b00      	cmp	r3, #0
1a000692:	d1ea      	bne.n	1a00066a <SSD1306_Print+0xa>
1a000694:	4b61      	ldr	r3, [pc, #388]	; (1a00081c <SSD1306_Print+0x1bc>)
1a000696:	781b      	ldrb	r3, [r3, #0]
1a000698:	2b00      	cmp	r3, #0
1a00069a:	d0e6      	beq.n	1a00066a <SSD1306_Print+0xa>
1a00069c:	e004      	b.n	1a0006a8 <SSD1306_Print+0x48>
		x_pos = y_pos = 0;
1a00069e:	2300      	movs	r3, #0
1a0006a0:	4a5f      	ldr	r2, [pc, #380]	; (1a000820 <SSD1306_Print+0x1c0>)
1a0006a2:	8013      	strh	r3, [r2, #0]
1a0006a4:	4a5c      	ldr	r2, [pc, #368]	; (1a000818 <SSD1306_Print+0x1b8>)
1a0006a6:	8013      	strh	r3, [r2, #0]
		x_pos = 0;
		y_pos += text_size * 8;
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
			y_pos = 0;
	}
}
1a0006a8:	b003      	add	sp, #12
1a0006aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( (c == '\b') && (x_pos >= text_size * 6) ) {
1a0006ac:	4b5a      	ldr	r3, [pc, #360]	; (1a000818 <SSD1306_Print+0x1b8>)
1a0006ae:	f9b3 0000 	ldrsh.w	r0, [r3]
1a0006b2:	4b5c      	ldr	r3, [pc, #368]	; (1a000824 <SSD1306_Print+0x1c4>)
1a0006b4:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0006b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0006bc:	004a      	lsls	r2, r1, #1
1a0006be:	4290      	cmp	r0, r2
1a0006c0:	dbd7      	blt.n	1a000672 <SSD1306_Print+0x12>
		x_pos -= text_size * 6;
1a0006c2:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
1a0006c6:	005a      	lsls	r2, r3, #1
1a0006c8:	b293      	uxth	r3, r2
1a0006ca:	4403      	add	r3, r0
1a0006cc:	4a52      	ldr	r2, [pc, #328]	; (1a000818 <SSD1306_Print+0x1b8>)
1a0006ce:	8013      	strh	r3, [r2, #0]
		return;
1a0006d0:	e7ea      	b.n	1a0006a8 <SSD1306_Print+0x48>
		x_pos = 0;
1a0006d2:	4b51      	ldr	r3, [pc, #324]	; (1a000818 <SSD1306_Print+0x1b8>)
1a0006d4:	2200      	movs	r2, #0
1a0006d6:	801a      	strh	r2, [r3, #0]
		return;
1a0006d8:	e7e6      	b.n	1a0006a8 <SSD1306_Print+0x48>
		y_pos += text_size * 8;
1a0006da:	4b52      	ldr	r3, [pc, #328]	; (1a000824 <SSD1306_Print+0x1c4>)
1a0006dc:	f9b3 2000 	ldrsh.w	r2, [r3]
1a0006e0:	00d3      	lsls	r3, r2, #3
1a0006e2:	b29b      	uxth	r3, r3
1a0006e4:	494e      	ldr	r1, [pc, #312]	; (1a000820 <SSD1306_Print+0x1c0>)
1a0006e6:	8808      	ldrh	r0, [r1, #0]
1a0006e8:	4403      	add	r3, r0
1a0006ea:	b21b      	sxth	r3, r3
1a0006ec:	800b      	strh	r3, [r1, #0]
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
1a0006ee:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
1a0006f2:	4413      	add	r3, r2
1a0006f4:	2b40      	cmp	r3, #64	; 0x40
1a0006f6:	ddd7      	ble.n	1a0006a8 <SSD1306_Print+0x48>
			y_pos = 0;
1a0006f8:	2200      	movs	r2, #0
1a0006fa:	800a      	strh	r2, [r1, #0]
1a0006fc:	e7d4      	b.n	1a0006a8 <SSD1306_Print+0x48>
			line = Font2[(c - 'S') * 5 + i];
1a0006fe:	f1a7 0353 	sub.w	r3, r7, #83	; 0x53
1a000702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000706:	4433      	add	r3, r6
1a000708:	4a47      	ldr	r2, [pc, #284]	; (1a000828 <SSD1306_Print+0x1c8>)
1a00070a:	5cd5      	ldrb	r5, [r2, r3]
1a00070c:	e03a      	b.n	1a000784 <SSD1306_Print+0x124>
				_color = FALSE;
1a00070e:	f04f 0c00 	mov.w	ip, #0
			if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color);
1a000712:	4b44      	ldr	r3, [pc, #272]	; (1a000824 <SSD1306_Print+0x1c4>)
1a000714:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000718:	2b01      	cmp	r3, #1
1a00071a:	d01a      	beq.n	1a000752 <SSD1306_Print+0xf2>
			else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color);
1a00071c:	b29a      	uxth	r2, r3
1a00071e:	4b40      	ldr	r3, [pc, #256]	; (1a000820 <SSD1306_Print+0x1c0>)
1a000720:	8819      	ldrh	r1, [r3, #0]
1a000722:	fb12 1104 	smlabb	r1, r2, r4, r1
1a000726:	4b3c      	ldr	r3, [pc, #240]	; (1a000818 <SSD1306_Print+0x1b8>)
1a000728:	8818      	ldrh	r0, [r3, #0]
1a00072a:	fb12 0006 	smlabb	r0, r2, r6, r0
1a00072e:	f8cd c000 	str.w	ip, [sp]
1a000732:	4613      	mov	r3, r2
1a000734:	b289      	uxth	r1, r1
1a000736:	b280      	uxth	r0, r0
1a000738:	f7ff ff63 	bl	1a000602 <SSD1306_FillRect>
		for(j = 0; j < 7; j++, line >>= 1) {
1a00073c:	3401      	adds	r4, #1
1a00073e:	b2a4      	uxth	r4, r4
1a000740:	086d      	lsrs	r5, r5, #1
1a000742:	2c06      	cmp	r4, #6
1a000744:	d811      	bhi.n	1a00076a <SSD1306_Print+0x10a>
			if(line & 0x01)
1a000746:	f015 0f01 	tst.w	r5, #1
1a00074a:	d0e0      	beq.n	1a00070e <SSD1306_Print+0xae>
				_color = TRUE;
1a00074c:	f04f 0c01 	mov.w	ip, #1
1a000750:	e7df      	b.n	1a000712 <SSD1306_Print+0xb2>
			if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color);
1a000752:	4b33      	ldr	r3, [pc, #204]	; (1a000820 <SSD1306_Print+0x1c0>)
1a000754:	8819      	ldrh	r1, [r3, #0]
1a000756:	4421      	add	r1, r4
1a000758:	4b2f      	ldr	r3, [pc, #188]	; (1a000818 <SSD1306_Print+0x1b8>)
1a00075a:	8818      	ldrh	r0, [r3, #0]
1a00075c:	4430      	add	r0, r6
1a00075e:	4662      	mov	r2, ip
1a000760:	b289      	uxth	r1, r1
1a000762:	b280      	uxth	r0, r0
1a000764:	f7ff fe5e 	bl	1a000424 <SSD1306_DrawPixel>
1a000768:	e7e8      	b.n	1a00073c <SSD1306_Print+0xdc>
	for(i = 0; i < 5; i++ ) {
1a00076a:	3601      	adds	r6, #1
1a00076c:	b2b6      	uxth	r6, r6
1a00076e:	2e04      	cmp	r6, #4
1a000770:	d80a      	bhi.n	1a000788 <SSD1306_Print+0x128>
		if(c < 'S')
1a000772:	2f52      	cmp	r7, #82	; 0x52
1a000774:	d8c3      	bhi.n	1a0006fe <SSD1306_Print+0x9e>
			line = Font[(c - ' ') * 5 + i];
1a000776:	f1a7 0320 	sub.w	r3, r7, #32
1a00077a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00077e:	4433      	add	r3, r6
1a000780:	4a2a      	ldr	r2, [pc, #168]	; (1a00082c <SSD1306_Print+0x1cc>)
1a000782:	5cd5      	ldrb	r5, [r2, r3]
				_color = FALSE;
1a000784:	2400      	movs	r4, #0
1a000786:	e7dc      	b.n	1a000742 <SSD1306_Print+0xe2>
	SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE);
1a000788:	4d26      	ldr	r5, [pc, #152]	; (1a000824 <SSD1306_Print+0x1c4>)
1a00078a:	882a      	ldrh	r2, [r5, #0]
1a00078c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
1a000790:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
1a000794:	4922      	ldr	r1, [pc, #136]	; (1a000820 <SSD1306_Print+0x1c0>)
1a000796:	8809      	ldrh	r1, [r1, #0]
1a000798:	4c1f      	ldr	r4, [pc, #124]	; (1a000818 <SSD1306_Print+0x1b8>)
1a00079a:	8826      	ldrh	r6, [r4, #0]
1a00079c:	fa16 f080 	uxtah	r0, r6, r0
1a0007a0:	2600      	movs	r6, #0
1a0007a2:	9600      	str	r6, [sp, #0]
1a0007a4:	b29b      	uxth	r3, r3
1a0007a6:	b280      	uxth	r0, r0
1a0007a8:	f7ff ff2b 	bl	1a000602 <SSD1306_FillRect>
	x_pos += text_size * 6;
1a0007ac:	f9b5 1000 	ldrsh.w	r1, [r5]
1a0007b0:	b28a      	uxth	r2, r1
1a0007b2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
1a0007b6:	0043      	lsls	r3, r0, #1
1a0007b8:	b29b      	uxth	r3, r3
1a0007ba:	8820      	ldrh	r0, [r4, #0]
1a0007bc:	4403      	add	r3, r0
1a0007be:	b21b      	sxth	r3, r3
1a0007c0:	8023      	strh	r3, [r4, #0]
	if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) )
1a0007c2:	eb01 0441 	add.w	r4, r1, r1, lsl #1
1a0007c6:	0060      	lsls	r0, r4, #1
1a0007c8:	3080      	adds	r0, #128	; 0x80
1a0007ca:	4283      	cmp	r3, r0
1a0007cc:	dd02      	ble.n	1a0007d4 <SSD1306_Print+0x174>
		x_pos = SSD1306_LCDWIDTH;
1a0007ce:	4b12      	ldr	r3, [pc, #72]	; (1a000818 <SSD1306_Print+0x1b8>)
1a0007d0:	2080      	movs	r0, #128	; 0x80
1a0007d2:	8018      	strh	r0, [r3, #0]
	if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH)
1a0007d4:	4b11      	ldr	r3, [pc, #68]	; (1a00081c <SSD1306_Print+0x1bc>)
1a0007d6:	781b      	ldrb	r3, [r3, #0]
1a0007d8:	2b00      	cmp	r3, #0
1a0007da:	f43f af65 	beq.w	1a0006a8 <SSD1306_Print+0x48>
1a0007de:	eb01 0381 	add.w	r3, r1, r1, lsl #2
1a0007e2:	480d      	ldr	r0, [pc, #52]	; (1a000818 <SSD1306_Print+0x1b8>)
1a0007e4:	f9b0 0000 	ldrsh.w	r0, [r0]
1a0007e8:	4403      	add	r3, r0
1a0007ea:	2b80      	cmp	r3, #128	; 0x80
1a0007ec:	f77f af5c 	ble.w	1a0006a8 <SSD1306_Print+0x48>
		x_pos = 0;
1a0007f0:	4b09      	ldr	r3, [pc, #36]	; (1a000818 <SSD1306_Print+0x1b8>)
1a0007f2:	2000      	movs	r0, #0
1a0007f4:	8018      	strh	r0, [r3, #0]
		y_pos += text_size * 8;
1a0007f6:	00d3      	lsls	r3, r2, #3
1a0007f8:	b29b      	uxth	r3, r3
1a0007fa:	4a09      	ldr	r2, [pc, #36]	; (1a000820 <SSD1306_Print+0x1c0>)
1a0007fc:	8810      	ldrh	r0, [r2, #0]
1a0007fe:	4403      	add	r3, r0
1a000800:	b21b      	sxth	r3, r3
1a000802:	8013      	strh	r3, [r2, #0]
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
1a000804:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
1a000808:	440b      	add	r3, r1
1a00080a:	2b40      	cmp	r3, #64	; 0x40
1a00080c:	f77f af4c 	ble.w	1a0006a8 <SSD1306_Print+0x48>
			y_pos = 0;
1a000810:	4613      	mov	r3, r2
1a000812:	2200      	movs	r2, #0
1a000814:	801a      	strh	r2, [r3, #0]
1a000816:	e747      	b.n	1a0006a8 <SSD1306_Print+0x48>
1a000818:	10000850 	.word	0x10000850
1a00081c:	10000806 	.word	0x10000806
1a000820:	10000852 	.word	0x10000852
1a000824:	10000804 	.word	0x10000804
1a000828:	1a0021f4 	.word	0x1a0021f4
1a00082c:	1a002118 	.word	0x1a002118

1a000830 <SSD1306_DrawText>:
{
1a000830:	b538      	push	{r3, r4, r5, lr}
1a000832:	4614      	mov	r4, r2
1a000834:	461d      	mov	r5, r3
	SSD1306_GotoXY(x, y);
1a000836:	f7ff fefd 	bl	1a000634 <SSD1306_GotoXY>
	SSD1306_TextSize(size);
1a00083a:	4628      	mov	r0, r5
1a00083c:	f7ff ff08 	bl	1a000650 <SSD1306_TextSize>
	while(*_text != '\0')
1a000840:	e002      	b.n	1a000848 <SSD1306_DrawText+0x18>
		SSD1306_Print(*_text++);
1a000842:	3401      	adds	r4, #1
1a000844:	f7ff ff0c 	bl	1a000660 <SSD1306_Print>
	while(*_text != '\0')
1a000848:	7820      	ldrb	r0, [r4, #0]
1a00084a:	2800      	cmp	r0, #0
1a00084c:	d1f9      	bne.n	1a000842 <SSD1306_DrawText+0x12>
}
1a00084e:	bd38      	pop	{r3, r4, r5, pc}

1a000850 <main>:
//#define OLED_ADDR 0x3C
// I2C baudrate
#define OLED_I2C_RATE              400000 // 400 kHz


int main(void) {
1a000850:	b508      	push	{r3, lr}

	/* ------------- INICIALIZACIONES ------------- */

	/* Inicializar la placa */
	boardConfig();
1a000852:	f001 fa5f 	bl	1a001d14 <boardInit>
	i2cInit(I2C0, OLED_I2C_RATE);
1a000856:	4928      	ldr	r1, [pc, #160]	; (1a0008f8 <main+0xa8>)
1a000858:	2000      	movs	r0, #0
1a00085a:	f001 f949 	bl	1a001af0 <i2cInit>

	SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
1a00085e:	213c      	movs	r1, #60	; 0x3c
1a000860:	2002      	movs	r0, #2
1a000862:	f7ff fd61 	bl	1a000328 <SSD1306_Begin>
	// internally, this will display the splashscreen.
	//SSD1306_Display();
	//delay(2000);

	// Clear the buffer.
	SSD1306_ClearDisplay();
1a000866:	f7ff fe3d 	bl	1a0004e4 <SSD1306_ClearDisplay>

	//char txt[15];
	SSD1306_DrawText(5, 10, "CESE Co9", 2);
1a00086a:	2302      	movs	r3, #2
1a00086c:	4a23      	ldr	r2, [pc, #140]	; (1a0008fc <main+0xac>)
1a00086e:	210a      	movs	r1, #10
1a000870:	2005      	movs	r0, #5
1a000872:	f7ff ffdd 	bl	1a000830 <SSD1306_DrawText>
	SSD1306_Display();
1a000876:	f7ff fdfb 	bl	1a000470 <SSD1306_Display>
	SSD1306_DrawText(9, 35, "Co9", 2);
1a00087a:	2302      	movs	r3, #2
1a00087c:	4a20      	ldr	r2, [pc, #128]	; (1a000900 <main+0xb0>)
1a00087e:	2123      	movs	r1, #35	; 0x23
1a000880:	2009      	movs	r0, #9
1a000882:	f7ff ffd5 	bl	1a000830 <SSD1306_DrawText>
	SSD1306_Display();
1a000886:	f7ff fdf3 	bl	1a000470 <SSD1306_Display>

	//char txt[15];
	SSD1306_DrawText(0, 55, "Protocolos", 1);
1a00088a:	2301      	movs	r3, #1
1a00088c:	4a1d      	ldr	r2, [pc, #116]	; (1a000904 <main+0xb4>)
1a00088e:	2137      	movs	r1, #55	; 0x37
1a000890:	2000      	movs	r0, #0
1a000892:	f7ff ffcd 	bl	1a000830 <SSD1306_DrawText>
	SSD1306_Display();
1a000896:	f7ff fdeb 	bl	1a000470 <SSD1306_Display>

	delay(4000);
1a00089a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
1a00089e:	2100      	movs	r1, #0
1a0008a0:	f001 fa72 	bl	1a001d88 <delay>
	SSD1306_ClearDisplay();
1a0008a4:	f7ff fe1e 	bl	1a0004e4 <SSD1306_ClearDisplay>

	//char txt[15];
	SSD1306_DrawText(0, 20, "Sistema de\n\rMonitoreo\n\rAmbiental", 1);
1a0008a8:	2301      	movs	r3, #1
1a0008aa:	4a17      	ldr	r2, [pc, #92]	; (1a000908 <main+0xb8>)
1a0008ac:	2114      	movs	r1, #20
1a0008ae:	2000      	movs	r0, #0
1a0008b0:	f7ff ffbe 	bl	1a000830 <SSD1306_DrawText>
	SSD1306_Display();
1a0008b4:	f7ff fddc 	bl	1a000470 <SSD1306_Display>
	delay(4000);
1a0008b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
1a0008bc:	2100      	movs	r1, #0
1a0008be:	f001 fa63 	bl	1a001d88 <delay>
	SSD1306_ClearDisplay();
1a0008c2:	f7ff fe0f 	bl	1a0004e4 <SSD1306_ClearDisplay>
	  delay(2000);
	  SSD1306_ClearDisplay();*/

	//text display tests
	//char txt[40];
	SSD1306_DrawText(8,10, "TORRENT", 1);
1a0008c6:	2301      	movs	r3, #1
1a0008c8:	4a10      	ldr	r2, [pc, #64]	; (1a00090c <main+0xbc>)
1a0008ca:	210a      	movs	r1, #10
1a0008cc:	2008      	movs	r0, #8
1a0008ce:	f7ff ffaf 	bl	1a000830 <SSD1306_DrawText>
	SSD1306_Display();
1a0008d2:	f7ff fdcd 	bl	1a000470 <SSD1306_Display>
	SSD1306_DrawText(25,30, "Y", 1);
1a0008d6:	2301      	movs	r3, #1
1a0008d8:	4a0d      	ldr	r2, [pc, #52]	; (1a000910 <main+0xc0>)
1a0008da:	211e      	movs	r1, #30
1a0008dc:	2019      	movs	r0, #25
1a0008de:	f7ff ffa7 	bl	1a000830 <SSD1306_DrawText>
	SSD1306_Display();
1a0008e2:	f7ff fdc5 	bl	1a000470 <SSD1306_Display>
	SSD1306_DrawText(6,50, "DEL VALLE", 1);
1a0008e6:	2301      	movs	r3, #1
1a0008e8:	4a0a      	ldr	r2, [pc, #40]	; (1a000914 <main+0xc4>)
1a0008ea:	2132      	movs	r1, #50	; 0x32
1a0008ec:	2006      	movs	r0, #6
1a0008ee:	f7ff ff9f 	bl	1a000830 <SSD1306_DrawText>
	SSD1306_Display();
1a0008f2:	f7ff fdbd 	bl	1a000470 <SSD1306_Display>
1a0008f6:	e7fe      	b.n	1a0008f6 <main+0xa6>
1a0008f8:	00061a80 	.word	0x00061a80
1a0008fc:	1a0022f4 	.word	0x1a0022f4
1a000900:	1a002300 	.word	0x1a002300
1a000904:	1a002304 	.word	0x1a002304
1a000908:	1a002310 	.word	0x1a002310
1a00090c:	1a002334 	.word	0x1a002334
1a000910:	1a00233c 	.word	0x1a00233c
1a000914:	1a002340 	.word	0x1a002340

1a000918 <initialise_monitor_handles>:
}
1a000918:	4770      	bx	lr
1a00091a:	Address 0x000000001a00091a is out of bounds.


1a00091c <Reset_Handler>:
void Reset_Handler(void) {
1a00091c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00091e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000920:	4b19      	ldr	r3, [pc, #100]	; (1a000988 <Reset_Handler+0x6c>)
1a000922:	4a1a      	ldr	r2, [pc, #104]	; (1a00098c <Reset_Handler+0x70>)
1a000924:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000926:	3304      	adds	r3, #4
1a000928:	4a19      	ldr	r2, [pc, #100]	; (1a000990 <Reset_Handler+0x74>)
1a00092a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00092c:	2300      	movs	r3, #0
1a00092e:	e005      	b.n	1a00093c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000930:	4a18      	ldr	r2, [pc, #96]	; (1a000994 <Reset_Handler+0x78>)
1a000932:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00093a:	3301      	adds	r3, #1
1a00093c:	2b07      	cmp	r3, #7
1a00093e:	d9f7      	bls.n	1a000930 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000940:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000942:	4b15      	ldr	r3, [pc, #84]	; (1a000998 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000944:	e007      	b.n	1a000956 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000946:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00094a:	689a      	ldr	r2, [r3, #8]
1a00094c:	6859      	ldr	r1, [r3, #4]
1a00094e:	6818      	ldr	r0, [r3, #0]
1a000950:	f7ff fc1b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000954:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000956:	4a11      	ldr	r2, [pc, #68]	; (1a00099c <Reset_Handler+0x80>)
1a000958:	4293      	cmp	r3, r2
1a00095a:	d3f4      	bcc.n	1a000946 <Reset_Handler+0x2a>
1a00095c:	e006      	b.n	1a00096c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00095e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000960:	6859      	ldr	r1, [r3, #4]
1a000962:	f854 0b08 	ldr.w	r0, [r4], #8
1a000966:	f7ff fc1f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00096a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00096c:	4a0c      	ldr	r2, [pc, #48]	; (1a0009a0 <Reset_Handler+0x84>)
1a00096e:	4293      	cmp	r3, r2
1a000970:	d3f5      	bcc.n	1a00095e <Reset_Handler+0x42>
    SystemInit();
1a000972:	f000 fff3 	bl	1a00195c <SystemInit>
    __libc_init_array();
1a000976:	f001 fba3 	bl	1a0020c0 <__libc_init_array>
    initialise_monitor_handles();
1a00097a:	f7ff ffcd 	bl	1a000918 <initialise_monitor_handles>
    main();
1a00097e:	f7ff ff67 	bl	1a000850 <main>
        __asm__ volatile("wfi");
1a000982:	bf30      	wfi
1a000984:	e7fd      	b.n	1a000982 <Reset_Handler+0x66>
1a000986:	bf00      	nop
1a000988:	40053100 	.word	0x40053100
1a00098c:	10df1000 	.word	0x10df1000
1a000990:	01dff7ff 	.word	0x01dff7ff
1a000994:	e000e280 	.word	0xe000e280
1a000998:	1a000114 	.word	0x1a000114
1a00099c:	1a000150 	.word	0x1a000150
1a0009a0:	1a000178 	.word	0x1a000178

1a0009a4 <_fini>:
void _fini(void) {}
1a0009a4:	4770      	bx	lr

1a0009a6 <_init>:
void _init(void) {}
1a0009a6:	4770      	bx	lr

1a0009a8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0009a8:	2200      	movs	r2, #0
1a0009aa:	2a05      	cmp	r2, #5
1a0009ac:	d819      	bhi.n	1a0009e2 <Board_LED_Init+0x3a>
{
1a0009ae:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0009b0:	490c      	ldr	r1, [pc, #48]	; (1a0009e4 <Board_LED_Init+0x3c>)
1a0009b2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0009b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0009ba:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0009bc:	4b0a      	ldr	r3, [pc, #40]	; (1a0009e8 <Board_LED_Init+0x40>)
1a0009be:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0009c2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0009c6:	2001      	movs	r0, #1
1a0009c8:	40a0      	lsls	r0, r4
1a0009ca:	4301      	orrs	r1, r0
1a0009cc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0009d0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0009d4:	2100      	movs	r1, #0
1a0009d6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0009d8:	3201      	adds	r2, #1
1a0009da:	2a05      	cmp	r2, #5
1a0009dc:	d9e8      	bls.n	1a0009b0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0009de:	bc70      	pop	{r4, r5, r6}
1a0009e0:	4770      	bx	lr
1a0009e2:	4770      	bx	lr
1a0009e4:	1a002358 	.word	0x1a002358
1a0009e8:	400f4000 	.word	0x400f4000

1a0009ec <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0009ec:	2300      	movs	r3, #0
1a0009ee:	2b03      	cmp	r3, #3
1a0009f0:	d816      	bhi.n	1a000a20 <Board_TEC_Init+0x34>
{
1a0009f2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009f4:	490b      	ldr	r1, [pc, #44]	; (1a000a24 <Board_TEC_Init+0x38>)
1a0009f6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009fa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009fe:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000a00:	4c09      	ldr	r4, [pc, #36]	; (1a000a28 <Board_TEC_Init+0x3c>)
1a000a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a06:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000a0a:	2001      	movs	r0, #1
1a000a0c:	40a8      	lsls	r0, r5
1a000a0e:	ea21 0100 	bic.w	r1, r1, r0
1a000a12:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000a16:	3301      	adds	r3, #1
1a000a18:	2b03      	cmp	r3, #3
1a000a1a:	d9eb      	bls.n	1a0009f4 <Board_TEC_Init+0x8>
   }
}
1a000a1c:	bc30      	pop	{r4, r5}
1a000a1e:	4770      	bx	lr
1a000a20:	4770      	bx	lr
1a000a22:	bf00      	nop
1a000a24:	1a002350 	.word	0x1a002350
1a000a28:	400f4000 	.word	0x400f4000

1a000a2c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a2c:	2300      	movs	r3, #0
1a000a2e:	2b08      	cmp	r3, #8
1a000a30:	d816      	bhi.n	1a000a60 <Board_GPIO_Init+0x34>
{
1a000a32:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000a34:	490b      	ldr	r1, [pc, #44]	; (1a000a64 <Board_GPIO_Init+0x38>)
1a000a36:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000a3a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a3e:	784d      	ldrb	r5, [r1, #1]
1a000a40:	4c09      	ldr	r4, [pc, #36]	; (1a000a68 <Board_GPIO_Init+0x3c>)
1a000a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a46:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000a4a:	2001      	movs	r0, #1
1a000a4c:	40a8      	lsls	r0, r5
1a000a4e:	ea21 0100 	bic.w	r1, r1, r0
1a000a52:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a56:	3301      	adds	r3, #1
1a000a58:	2b08      	cmp	r3, #8
1a000a5a:	d9eb      	bls.n	1a000a34 <Board_GPIO_Init+0x8>
   }
}
1a000a5c:	bc30      	pop	{r4, r5}
1a000a5e:	4770      	bx	lr
1a000a60:	4770      	bx	lr
1a000a62:	bf00      	nop
1a000a64:	1a002364 	.word	0x1a002364
1a000a68:	400f4000 	.word	0x400f4000

1a000a6c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000a6c:	b510      	push	{r4, lr}
1a000a6e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000a70:	4c08      	ldr	r4, [pc, #32]	; (1a000a94 <Board_ADC_Init+0x28>)
1a000a72:	4669      	mov	r1, sp
1a000a74:	4620      	mov	r0, r4
1a000a76:	f000 f99d 	bl	1a000db4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000a7a:	4a07      	ldr	r2, [pc, #28]	; (1a000a98 <Board_ADC_Init+0x2c>)
1a000a7c:	4669      	mov	r1, sp
1a000a7e:	4620      	mov	r0, r4
1a000a80:	f000 f9b8 	bl	1a000df4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000a84:	2200      	movs	r2, #0
1a000a86:	4669      	mov	r1, sp
1a000a88:	4620      	mov	r0, r4
1a000a8a:	f000 f9cc 	bl	1a000e26 <Chip_ADC_SetResolution>
}
1a000a8e:	b002      	add	sp, #8
1a000a90:	bd10      	pop	{r4, pc}
1a000a92:	bf00      	nop
1a000a94:	400e3000 	.word	0x400e3000
1a000a98:	00061a80 	.word	0x00061a80

1a000a9c <Board_SPI_Init>:
{
1a000a9c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000a9e:	4c0b      	ldr	r4, [pc, #44]	; (1a000acc <Board_SPI_Init+0x30>)
1a000aa0:	4620      	mov	r0, r4
1a000aa2:	f000 fe19 	bl	1a0016d8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000aa6:	6863      	ldr	r3, [r4, #4]
1a000aa8:	f023 0304 	bic.w	r3, r3, #4
1a000aac:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000aae:	6823      	ldr	r3, [r4, #0]
1a000ab0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000ab4:	f043 0307 	orr.w	r3, r3, #7
1a000ab8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000aba:	4905      	ldr	r1, [pc, #20]	; (1a000ad0 <Board_SPI_Init+0x34>)
1a000abc:	4620      	mov	r0, r4
1a000abe:	f000 fdec 	bl	1a00169a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000ac2:	6863      	ldr	r3, [r4, #4]
1a000ac4:	f043 0302 	orr.w	r3, r3, #2
1a000ac8:	6063      	str	r3, [r4, #4]
}
1a000aca:	bd10      	pop	{r4, pc}
1a000acc:	400c5000 	.word	0x400c5000
1a000ad0:	000186a0 	.word	0x000186a0

1a000ad4 <Board_I2C_Init>:
{
1a000ad4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000ad6:	2000      	movs	r0, #0
1a000ad8:	f000 feba 	bl	1a001850 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000adc:	4b04      	ldr	r3, [pc, #16]	; (1a000af0 <Board_I2C_Init+0x1c>)
1a000ade:	f640 0208 	movw	r2, #2056	; 0x808
1a000ae2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000ae6:	4903      	ldr	r1, [pc, #12]	; (1a000af4 <Board_I2C_Init+0x20>)
1a000ae8:	2000      	movs	r0, #0
1a000aea:	f000 fec3 	bl	1a001874 <Chip_I2C_SetClockRate>
}
1a000aee:	bd08      	pop	{r3, pc}
1a000af0:	40086000 	.word	0x40086000
1a000af4:	000f4240 	.word	0x000f4240

1a000af8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000af8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000afa:	4c07      	ldr	r4, [pc, #28]	; (1a000b18 <Board_Debug_Init+0x20>)
1a000afc:	4620      	mov	r0, r4
1a000afe:	f000 f897 	bl	1a000c30 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000b02:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000b06:	4620      	mov	r0, r4
1a000b08:	f000 f8bc 	bl	1a000c84 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000b0c:	2303      	movs	r3, #3
1a000b0e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000b10:	2301      	movs	r3, #1
1a000b12:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000b14:	bd10      	pop	{r4, pc}
1a000b16:	bf00      	nop
1a000b18:	400c1000 	.word	0x400c1000

1a000b1c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000b1c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000b1e:	f7ff ffeb 	bl	1a000af8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000b22:	4809      	ldr	r0, [pc, #36]	; (1a000b48 <Board_Init+0x2c>)
1a000b24:	f000 fd99 	bl	1a00165a <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000b28:	f7ff ff80 	bl	1a000a2c <Board_GPIO_Init>
   Board_ADC_Init();
1a000b2c:	f7ff ff9e 	bl	1a000a6c <Board_ADC_Init>
   Board_SPI_Init();
1a000b30:	f7ff ffb4 	bl	1a000a9c <Board_SPI_Init>
   Board_I2C_Init();
1a000b34:	f7ff ffce 	bl	1a000ad4 <Board_I2C_Init>

   Board_LED_Init();
1a000b38:	f7ff ff36 	bl	1a0009a8 <Board_LED_Init>
   Board_TEC_Init();
1a000b3c:	f7ff ff56 	bl	1a0009ec <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000b40:	f000 fc40 	bl	1a0013c4 <SystemCoreClockUpdate>
}
1a000b44:	bd08      	pop	{r3, pc}
1a000b46:	bf00      	nop
1a000b48:	400f4000 	.word	0x400f4000

1a000b4c <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000b4c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000b4e:	f7ff ffd3 	bl	1a000af8 <Board_Debug_Init>
1a000b52:	bd08      	pop	{r3, pc}

1a000b54 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b54:	2300      	movs	r3, #0
1a000b56:	2b1c      	cmp	r3, #28
1a000b58:	d812      	bhi.n	1a000b80 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000b5a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000b5c:	4a09      	ldr	r2, [pc, #36]	; (1a000b84 <Board_SetupMuxing+0x30>)
1a000b5e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000b62:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000b66:	784a      	ldrb	r2, [r1, #1]
1a000b68:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000b6a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000b6e:	4906      	ldr	r1, [pc, #24]	; (1a000b88 <Board_SetupMuxing+0x34>)
1a000b70:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b74:	3301      	adds	r3, #1
1a000b76:	2b1c      	cmp	r3, #28
1a000b78:	d9f0      	bls.n	1a000b5c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000b7e:	4770      	bx	lr
1a000b80:	4770      	bx	lr
1a000b82:	bf00      	nop
1a000b84:	1a002380 	.word	0x1a002380
1a000b88:	40086000 	.word	0x40086000

1a000b8c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b8c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000b8e:	4a17      	ldr	r2, [pc, #92]	; (1a000bec <Board_SetupClocking+0x60>)
1a000b90:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b98:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b9c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000ba0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000ba8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000bac:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000bb0:	2201      	movs	r2, #1
1a000bb2:	490f      	ldr	r1, [pc, #60]	; (1a000bf0 <Board_SetupClocking+0x64>)
1a000bb4:	2006      	movs	r0, #6
1a000bb6:	f000 fc0f 	bl	1a0013d8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000bba:	2400      	movs	r4, #0
1a000bbc:	b14c      	cbz	r4, 1a000bd2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000bbe:	4b0b      	ldr	r3, [pc, #44]	; (1a000bec <Board_SetupClocking+0x60>)
1a000bc0:	685a      	ldr	r2, [r3, #4]
1a000bc2:	f022 020c 	bic.w	r2, r2, #12
1a000bc6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000bc8:	685a      	ldr	r2, [r3, #4]
1a000bca:	f042 0203 	orr.w	r2, r2, #3
1a000bce:	605a      	str	r2, [r3, #4]
}
1a000bd0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000bd2:	4808      	ldr	r0, [pc, #32]	; (1a000bf4 <Board_SetupClocking+0x68>)
1a000bd4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000bd8:	2301      	movs	r3, #1
1a000bda:	788a      	ldrb	r2, [r1, #2]
1a000bdc:	7849      	ldrb	r1, [r1, #1]
1a000bde:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000be2:	f000 fb4b 	bl	1a00127c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000be6:	3401      	adds	r4, #1
1a000be8:	e7e8      	b.n	1a000bbc <Board_SetupClocking+0x30>
1a000bea:	bf00      	nop
1a000bec:	40043000 	.word	0x40043000
1a000bf0:	0c28cb00 	.word	0x0c28cb00
1a000bf4:	1a00237c 	.word	0x1a00237c

1a000bf8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000bf8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000bfa:	f7ff ffab 	bl	1a000b54 <Board_SetupMuxing>
    Board_SetupClocking();
1a000bfe:	f7ff ffc5 	bl	1a000b8c <Board_SetupClocking>
}
1a000c02:	bd08      	pop	{r3, pc}

1a000c04 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000c04:	4b09      	ldr	r3, [pc, #36]	; (1a000c2c <Chip_UART_GetIndex+0x28>)
1a000c06:	4298      	cmp	r0, r3
1a000c08:	d009      	beq.n	1a000c1e <Chip_UART_GetIndex+0x1a>
1a000c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000c0e:	4298      	cmp	r0, r3
1a000c10:	d007      	beq.n	1a000c22 <Chip_UART_GetIndex+0x1e>
1a000c12:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000c16:	4298      	cmp	r0, r3
1a000c18:	d005      	beq.n	1a000c26 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000c1a:	2000      	movs	r0, #0
1a000c1c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000c1e:	2002      	movs	r0, #2
1a000c20:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000c22:	2003      	movs	r0, #3
1a000c24:	4770      	bx	lr
			return 1;
1a000c26:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000c28:	4770      	bx	lr
1a000c2a:	bf00      	nop
1a000c2c:	400c1000 	.word	0x400c1000

1a000c30 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000c30:	b530      	push	{r4, r5, lr}
1a000c32:	b083      	sub	sp, #12
1a000c34:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000c36:	f7ff ffe5 	bl	1a000c04 <Chip_UART_GetIndex>
1a000c3a:	2301      	movs	r3, #1
1a000c3c:	461a      	mov	r2, r3
1a000c3e:	4619      	mov	r1, r3
1a000c40:	4d0e      	ldr	r5, [pc, #56]	; (1a000c7c <Chip_UART_Init+0x4c>)
1a000c42:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000c46:	f000 fb5f 	bl	1a001308 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000c4a:	2307      	movs	r3, #7
1a000c4c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000c4e:	2300      	movs	r3, #0
1a000c50:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000c52:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000c54:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000c56:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000c58:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000c5a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000c5c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000c5e:	4b08      	ldr	r3, [pc, #32]	; (1a000c80 <Chip_UART_Init+0x50>)
1a000c60:	429c      	cmp	r4, r3
1a000c62:	d006      	beq.n	1a000c72 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000c64:	2303      	movs	r3, #3
1a000c66:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000c68:	2310      	movs	r3, #16
1a000c6a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000c6c:	9b01      	ldr	r3, [sp, #4]
}
1a000c6e:	b003      	add	sp, #12
1a000c70:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000c72:	2300      	movs	r3, #0
1a000c74:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000c76:	69a3      	ldr	r3, [r4, #24]
1a000c78:	9301      	str	r3, [sp, #4]
1a000c7a:	e7f3      	b.n	1a000c64 <Chip_UART_Init+0x34>
1a000c7c:	1a0023fc 	.word	0x1a0023fc
1a000c80:	40082000 	.word	0x40082000

1a000c84 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000c88:	b083      	sub	sp, #12
1a000c8a:	4683      	mov	fp, r0
1a000c8c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000c8e:	f7ff ffb9 	bl	1a000c04 <Chip_UART_GetIndex>
1a000c92:	4b35      	ldr	r3, [pc, #212]	; (1a000d68 <Chip_UART_SetBaudFDR+0xe4>)
1a000c94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000c98:	f000 fb6e 	bl	1a001378 <Chip_Clock_GetRate>
1a000c9c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000c9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000ca2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000ca4:	2300      	movs	r3, #0
1a000ca6:	9301      	str	r3, [sp, #4]
1a000ca8:	46a2      	mov	sl, r4
1a000caa:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000cac:	e02a      	b.n	1a000d04 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000cae:	4242      	negs	r2, r0
				div ++;
1a000cb0:	1c4b      	adds	r3, r1, #1
1a000cb2:	e017      	b.n	1a000ce4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000cb4:	b30a      	cbz	r2, 1a000cfa <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000cb6:	4617      	mov	r7, r2
			sd = d;
1a000cb8:	9501      	str	r5, [sp, #4]
			sm = m;
1a000cba:	46a2      	mov	sl, r4
			sdiv = div;
1a000cbc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000cbe:	3501      	adds	r5, #1
1a000cc0:	42ac      	cmp	r4, r5
1a000cc2:	d91e      	bls.n	1a000d02 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000cc4:	0933      	lsrs	r3, r6, #4
1a000cc6:	0730      	lsls	r0, r6, #28
1a000cc8:	fba4 0100 	umull	r0, r1, r4, r0
1a000ccc:	fb04 1103 	mla	r1, r4, r3, r1
1a000cd0:	1962      	adds	r2, r4, r5
1a000cd2:	fb08 f202 	mul.w	r2, r8, r2
1a000cd6:	2300      	movs	r3, #0
1a000cd8:	f001 f872 	bl	1a001dc0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000cdc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000cde:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000ce0:	2800      	cmp	r0, #0
1a000ce2:	dbe4      	blt.n	1a000cae <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000ce4:	4297      	cmp	r7, r2
1a000ce6:	d3ea      	bcc.n	1a000cbe <Chip_UART_SetBaudFDR+0x3a>
1a000ce8:	2b00      	cmp	r3, #0
1a000cea:	d0e8      	beq.n	1a000cbe <Chip_UART_SetBaudFDR+0x3a>
1a000cec:	0c19      	lsrs	r1, r3, #16
1a000cee:	d1e6      	bne.n	1a000cbe <Chip_UART_SetBaudFDR+0x3a>
1a000cf0:	2b02      	cmp	r3, #2
1a000cf2:	d8df      	bhi.n	1a000cb4 <Chip_UART_SetBaudFDR+0x30>
1a000cf4:	2d00      	cmp	r5, #0
1a000cf6:	d0dd      	beq.n	1a000cb4 <Chip_UART_SetBaudFDR+0x30>
1a000cf8:	e7e1      	b.n	1a000cbe <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000cfa:	4617      	mov	r7, r2
			sd = d;
1a000cfc:	9501      	str	r5, [sp, #4]
			sm = m;
1a000cfe:	46a2      	mov	sl, r4
			sdiv = div;
1a000d00:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000d02:	3401      	adds	r4, #1
1a000d04:	b11f      	cbz	r7, 1a000d0e <Chip_UART_SetBaudFDR+0x8a>
1a000d06:	2c0f      	cmp	r4, #15
1a000d08:	d801      	bhi.n	1a000d0e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000d0a:	2500      	movs	r5, #0
1a000d0c:	e7d8      	b.n	1a000cc0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000d0e:	f1b9 0f00 	cmp.w	r9, #0
1a000d12:	d024      	beq.n	1a000d5e <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000d14:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000d1c:	f8cb 300c 	str.w	r3, [fp, #12]
1a000d20:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000d24:	f8cb 3000 	str.w	r3, [fp]
1a000d28:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000d2c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000d30:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000d38:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000d3c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000d40:	b2db      	uxtb	r3, r3
1a000d42:	9901      	ldr	r1, [sp, #4]
1a000d44:	f001 020f 	and.w	r2, r1, #15
1a000d48:	4313      	orrs	r3, r2
1a000d4a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000d4e:	0933      	lsrs	r3, r6, #4
1a000d50:	fb0a f303 	mul.w	r3, sl, r3
1a000d54:	448a      	add	sl, r1
1a000d56:	fb09 f90a 	mul.w	r9, r9, sl
1a000d5a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000d5e:	4648      	mov	r0, r9
1a000d60:	b003      	add	sp, #12
1a000d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000d66:	bf00      	nop
1a000d68:	1a0023f4 	.word	0x1a0023f4

1a000d6c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000d6c:	4b03      	ldr	r3, [pc, #12]	; (1a000d7c <Chip_ADC_GetClockIndex+0x10>)
1a000d6e:	4298      	cmp	r0, r3
1a000d70:	d001      	beq.n	1a000d76 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000d72:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000d74:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000d76:	2004      	movs	r0, #4
1a000d78:	4770      	bx	lr
1a000d7a:	bf00      	nop
1a000d7c:	400e4000 	.word	0x400e4000

1a000d80 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000d80:	b570      	push	{r4, r5, r6, lr}
1a000d82:	460d      	mov	r5, r1
1a000d84:	4614      	mov	r4, r2
1a000d86:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000d88:	f7ff fff0 	bl	1a000d6c <Chip_ADC_GetClockIndex>
1a000d8c:	f000 faf4 	bl	1a001378 <Chip_Clock_GetRate>
	if (burstMode) {
1a000d90:	b965      	cbnz	r5, 1a000dac <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000d92:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000d96:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000d9a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000d9e:	0064      	lsls	r4, r4, #1
1a000da0:	fbb0 f0f4 	udiv	r0, r0, r4
1a000da4:	b2c0      	uxtb	r0, r0
1a000da6:	3801      	subs	r0, #1
	return div;
}
1a000da8:	b2c0      	uxtb	r0, r0
1a000daa:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000dac:	fb04 f406 	mul.w	r4, r4, r6
1a000db0:	e7f3      	b.n	1a000d9a <getClkDiv+0x1a>
1a000db2:	Address 0x000000001a000db2 is out of bounds.


1a000db4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000db4:	b538      	push	{r3, r4, r5, lr}
1a000db6:	4605      	mov	r5, r0
1a000db8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000dba:	f7ff ffd7 	bl	1a000d6c <Chip_ADC_GetClockIndex>
1a000dbe:	2301      	movs	r3, #1
1a000dc0:	461a      	mov	r2, r3
1a000dc2:	4619      	mov	r1, r3
1a000dc4:	f000 faa0 	bl	1a001308 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000dc8:	2100      	movs	r1, #0
1a000dca:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000dcc:	4a08      	ldr	r2, [pc, #32]	; (1a000df0 <Chip_ADC_Init+0x3c>)
1a000dce:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000dd0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000dd2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000dd4:	230b      	movs	r3, #11
1a000dd6:	4628      	mov	r0, r5
1a000dd8:	f7ff ffd2 	bl	1a000d80 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000ddc:	0200      	lsls	r0, r0, #8
1a000dde:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000de2:	7920      	ldrb	r0, [r4, #4]
1a000de4:	0440      	lsls	r0, r0, #17
1a000de6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000dea:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000dec:	6028      	str	r0, [r5, #0]
}
1a000dee:	bd38      	pop	{r3, r4, r5, pc}
1a000df0:	00061a80 	.word	0x00061a80

1a000df4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000df4:	b570      	push	{r4, r5, r6, lr}
1a000df6:	4605      	mov	r5, r0
1a000df8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000dfa:	6804      	ldr	r4, [r0, #0]
1a000dfc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000e00:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000e04:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000e06:	790b      	ldrb	r3, [r1, #4]
1a000e08:	f1c3 030b 	rsb	r3, r3, #11
1a000e0c:	b2db      	uxtb	r3, r3
1a000e0e:	7949      	ldrb	r1, [r1, #5]
1a000e10:	f7ff ffb6 	bl	1a000d80 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e14:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e18:	7930      	ldrb	r0, [r6, #4]
1a000e1a:	0440      	lsls	r0, r0, #17
1a000e1c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000e20:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000e22:	6028      	str	r0, [r5, #0]
}
1a000e24:	bd70      	pop	{r4, r5, r6, pc}

1a000e26 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000e26:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000e28:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000e2a:	680a      	ldr	r2, [r1, #0]
1a000e2c:	f7ff ffe2 	bl	1a000df4 <Chip_ADC_SetSampleRate>
}
1a000e30:	bd08      	pop	{r3, pc}
1a000e32:	Address 0x000000001a000e32 is out of bounds.


1a000e34 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000e34:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000e36:	680b      	ldr	r3, [r1, #0]
1a000e38:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000e3c:	d002      	beq.n	1a000e44 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000e42:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000e44:	4607      	mov	r7, r0
1a000e46:	2501      	movs	r5, #1
1a000e48:	e03b      	b.n	1a000ec2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000e4a:	694b      	ldr	r3, [r1, #20]
1a000e4c:	fb03 f302 	mul.w	r3, r3, r2
1a000e50:	fbb3 f3f5 	udiv	r3, r3, r5
1a000e54:	e014      	b.n	1a000e80 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000e56:	461c      	mov	r4, r3
1a000e58:	e020      	b.n	1a000e9c <pll_calc_divs+0x68>
		return -val;
1a000e5a:	f1cc 0c00 	rsb	ip, ip, #0
1a000e5e:	e020      	b.n	1a000ea2 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000e60:	3201      	adds	r2, #1
1a000e62:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000e66:	dc26      	bgt.n	1a000eb6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000e68:	680c      	ldr	r4, [r1, #0]
1a000e6a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000e6e:	d0ec      	beq.n	1a000e4a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000e70:	1c73      	adds	r3, r6, #1
1a000e72:	fa02 fc03 	lsl.w	ip, r2, r3
1a000e76:	694b      	ldr	r3, [r1, #20]
1a000e78:	fb03 f30c 	mul.w	r3, r3, ip
1a000e7c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000e80:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000ed0 <pll_calc_divs+0x9c>
1a000e84:	4563      	cmp	r3, ip
1a000e86:	d9eb      	bls.n	1a000e60 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000e88:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000ed4 <pll_calc_divs+0xa0>
1a000e8c:	4563      	cmp	r3, ip
1a000e8e:	d812      	bhi.n	1a000eb6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000e90:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000e94:	d1df      	bne.n	1a000e56 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000e96:	1c74      	adds	r4, r6, #1
1a000e98:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000e9c:	ebb0 0c04 	subs.w	ip, r0, r4
1a000ea0:	d4db      	bmi.n	1a000e5a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000ea2:	4567      	cmp	r7, ip
1a000ea4:	d9dc      	bls.n	1a000e60 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000ea6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000ea8:	1c77      	adds	r7, r6, #1
1a000eaa:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000eac:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000eae:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000eb0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000eb2:	4667      	mov	r7, ip
1a000eb4:	e7d4      	b.n	1a000e60 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000eb6:	3601      	adds	r6, #1
1a000eb8:	2e03      	cmp	r6, #3
1a000eba:	dc01      	bgt.n	1a000ec0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000ebc:	2201      	movs	r2, #1
1a000ebe:	e7d0      	b.n	1a000e62 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000ec0:	3501      	adds	r5, #1
1a000ec2:	2d04      	cmp	r5, #4
1a000ec4:	dc01      	bgt.n	1a000eca <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000ec6:	2600      	movs	r6, #0
1a000ec8:	e7f6      	b.n	1a000eb8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000eca:	bcf0      	pop	{r4, r5, r6, r7}
1a000ecc:	4770      	bx	lr
1a000ece:	bf00      	nop
1a000ed0:	094c5eff 	.word	0x094c5eff
1a000ed4:	1312d000 	.word	0x1312d000

1a000ed8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000eda:	b099      	sub	sp, #100	; 0x64
1a000edc:	4605      	mov	r5, r0
1a000ede:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000ee0:	225c      	movs	r2, #92	; 0x5c
1a000ee2:	2100      	movs	r1, #0
1a000ee4:	a801      	add	r0, sp, #4
1a000ee6:	f001 f90f 	bl	1a002108 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000eea:	2380      	movs	r3, #128	; 0x80
1a000eec:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000eee:	6963      	ldr	r3, [r4, #20]
1a000ef0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000ef2:	7923      	ldrb	r3, [r4, #4]
1a000ef4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000ef8:	4669      	mov	r1, sp
1a000efa:	4628      	mov	r0, r5
1a000efc:	f7ff ff9a 	bl	1a000e34 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000f00:	9b06      	ldr	r3, [sp, #24]
1a000f02:	42ab      	cmp	r3, r5
1a000f04:	d027      	beq.n	1a000f56 <pll_get_frac+0x7e>
	if (val < 0)
1a000f06:	1aeb      	subs	r3, r5, r3
1a000f08:	d42e      	bmi.n	1a000f68 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000f0a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000f12:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000f14:	6963      	ldr	r3, [r4, #20]
1a000f16:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000f18:	7923      	ldrb	r3, [r4, #4]
1a000f1a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000f1e:	a910      	add	r1, sp, #64	; 0x40
1a000f20:	4628      	mov	r0, r5
1a000f22:	f7ff ff87 	bl	1a000e34 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000f26:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000f28:	42ab      	cmp	r3, r5
1a000f2a:	d01f      	beq.n	1a000f6c <pll_get_frac+0x94>
	if (val < 0)
1a000f2c:	1aeb      	subs	r3, r5, r3
1a000f2e:	d425      	bmi.n	1a000f7c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000f30:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000f32:	4b2b      	ldr	r3, [pc, #172]	; (1a000fe0 <pll_get_frac+0x108>)
1a000f34:	429d      	cmp	r5, r3
1a000f36:	d923      	bls.n	1a000f80 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000f3a:	1aed      	subs	r5, r5, r3
1a000f3c:	d433      	bmi.n	1a000fa6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000f3e:	42ae      	cmp	r6, r5
1a000f40:	dc3b      	bgt.n	1a000fba <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000f42:	42be      	cmp	r6, r7
1a000f44:	dc31      	bgt.n	1a000faa <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000f46:	466d      	mov	r5, sp
1a000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f54:	e006      	b.n	1a000f64 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000f56:	466d      	mov	r5, sp
1a000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000f64:	b019      	add	sp, #100	; 0x64
1a000f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000f68:	425b      	negs	r3, r3
1a000f6a:	e7ce      	b.n	1a000f0a <pll_get_frac+0x32>
		*ppll = pll[2];
1a000f6c:	ad10      	add	r5, sp, #64	; 0x40
1a000f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000f7a:	e7f3      	b.n	1a000f64 <pll_get_frac+0x8c>
		return -val;
1a000f7c:	425b      	negs	r3, r3
1a000f7e:	e7d7      	b.n	1a000f30 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000f80:	2340      	movs	r3, #64	; 0x40
1a000f82:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000f84:	6963      	ldr	r3, [r4, #20]
1a000f86:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000f88:	a908      	add	r1, sp, #32
1a000f8a:	4628      	mov	r0, r5
1a000f8c:	f7ff ff52 	bl	1a000e34 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000f92:	42ab      	cmp	r3, r5
1a000f94:	d1d0      	bne.n	1a000f38 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000f96:	ad08      	add	r5, sp, #32
1a000f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000fa4:	e7de      	b.n	1a000f64 <pll_get_frac+0x8c>
		return -val;
1a000fa6:	426d      	negs	r5, r5
1a000fa8:	e7c9      	b.n	1a000f3e <pll_get_frac+0x66>
			*ppll = pll[2];
1a000faa:	ad10      	add	r5, sp, #64	; 0x40
1a000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fb8:	e7d4      	b.n	1a000f64 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000fba:	42af      	cmp	r7, r5
1a000fbc:	db07      	blt.n	1a000fce <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000fbe:	ad08      	add	r5, sp, #32
1a000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fcc:	e7ca      	b.n	1a000f64 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000fce:	ad10      	add	r5, sp, #64	; 0x40
1a000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fdc:	e7c2      	b.n	1a000f64 <pll_get_frac+0x8c>
1a000fde:	bf00      	nop
1a000fe0:	068e7780 	.word	0x068e7780

1a000fe4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000fe4:	b430      	push	{r4, r5}
1a000fe6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000fe8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000fea:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000fec:	e000      	b.n	1a000ff0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000fee:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000ff0:	281c      	cmp	r0, #28
1a000ff2:	d118      	bne.n	1a001026 <Chip_Clock_FindBaseClock+0x42>
1a000ff4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ff8:	0051      	lsls	r1, r2, #1
1a000ffa:	4a0c      	ldr	r2, [pc, #48]	; (1a00102c <Chip_Clock_FindBaseClock+0x48>)
1a000ffc:	440a      	add	r2, r1
1a000ffe:	7914      	ldrb	r4, [r2, #4]
1a001000:	4284      	cmp	r4, r0
1a001002:	d010      	beq.n	1a001026 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001004:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001008:	004a      	lsls	r2, r1, #1
1a00100a:	4908      	ldr	r1, [pc, #32]	; (1a00102c <Chip_Clock_FindBaseClock+0x48>)
1a00100c:	5a8a      	ldrh	r2, [r1, r2]
1a00100e:	42aa      	cmp	r2, r5
1a001010:	d8ed      	bhi.n	1a000fee <Chip_Clock_FindBaseClock+0xa>
1a001012:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001016:	0051      	lsls	r1, r2, #1
1a001018:	4a04      	ldr	r2, [pc, #16]	; (1a00102c <Chip_Clock_FindBaseClock+0x48>)
1a00101a:	440a      	add	r2, r1
1a00101c:	8852      	ldrh	r2, [r2, #2]
1a00101e:	42aa      	cmp	r2, r5
1a001020:	d3e5      	bcc.n	1a000fee <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001022:	4620      	mov	r0, r4
1a001024:	e7e4      	b.n	1a000ff0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001026:	bc30      	pop	{r4, r5}
1a001028:	4770      	bx	lr
1a00102a:	bf00      	nop
1a00102c:	1a002410 	.word	0x1a002410

1a001030 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001030:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001036:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001038:	4a0d      	ldr	r2, [pc, #52]	; (1a001070 <Chip_Clock_EnableCrystal+0x40>)
1a00103a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00103c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001040:	6992      	ldr	r2, [r2, #24]
1a001042:	428a      	cmp	r2, r1
1a001044:	d001      	beq.n	1a00104a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001046:	4a0a      	ldr	r2, [pc, #40]	; (1a001070 <Chip_Clock_EnableCrystal+0x40>)
1a001048:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00104a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00104e:	4a09      	ldr	r2, [pc, #36]	; (1a001074 <Chip_Clock_EnableCrystal+0x44>)
1a001050:	6811      	ldr	r1, [r2, #0]
1a001052:	4a09      	ldr	r2, [pc, #36]	; (1a001078 <Chip_Clock_EnableCrystal+0x48>)
1a001054:	4291      	cmp	r1, r2
1a001056:	d901      	bls.n	1a00105c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001058:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00105c:	4a04      	ldr	r2, [pc, #16]	; (1a001070 <Chip_Clock_EnableCrystal+0x40>)
1a00105e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001060:	9b01      	ldr	r3, [sp, #4]
1a001062:	1e5a      	subs	r2, r3, #1
1a001064:	9201      	str	r2, [sp, #4]
1a001066:	2b00      	cmp	r3, #0
1a001068:	d1fa      	bne.n	1a001060 <Chip_Clock_EnableCrystal+0x30>
}
1a00106a:	b002      	add	sp, #8
1a00106c:	4770      	bx	lr
1a00106e:	bf00      	nop
1a001070:	40050000 	.word	0x40050000
1a001074:	1a002378 	.word	0x1a002378
1a001078:	01312cff 	.word	0x01312cff

1a00107c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00107c:	3012      	adds	r0, #18
1a00107e:	4b05      	ldr	r3, [pc, #20]	; (1a001094 <Chip_Clock_GetDividerSource+0x18>)
1a001080:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001084:	f010 0f01 	tst.w	r0, #1
1a001088:	d102      	bne.n	1a001090 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00108a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00108e:	4770      	bx	lr
		return CLKINPUT_PD;
1a001090:	2011      	movs	r0, #17
}
1a001092:	4770      	bx	lr
1a001094:	40050000 	.word	0x40050000

1a001098 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001098:	f100 0212 	add.w	r2, r0, #18
1a00109c:	4b03      	ldr	r3, [pc, #12]	; (1a0010ac <Chip_Clock_GetDividerDivisor+0x14>)
1a00109e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0010a2:	4b03      	ldr	r3, [pc, #12]	; (1a0010b0 <Chip_Clock_GetDividerDivisor+0x18>)
1a0010a4:	5c18      	ldrb	r0, [r3, r0]
}
1a0010a6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0010aa:	4770      	bx	lr
1a0010ac:	40050000 	.word	0x40050000
1a0010b0:	1a002408 	.word	0x1a002408

1a0010b4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0010b4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0010b6:	2810      	cmp	r0, #16
1a0010b8:	d80a      	bhi.n	1a0010d0 <Chip_Clock_GetClockInputHz+0x1c>
1a0010ba:	e8df f000 	tbb	[pc, r0]
1a0010be:	0b42      	.short	0x0b42
1a0010c0:	091f160d 	.word	0x091f160d
1a0010c4:	2b282522 	.word	0x2b282522
1a0010c8:	322e0909 	.word	0x322e0909
1a0010cc:	3a36      	.short	0x3a36
1a0010ce:	3e          	.byte	0x3e
1a0010cf:	00          	.byte	0x00
	uint32_t rate = 0;
1a0010d0:	2000      	movs	r0, #0
1a0010d2:	e038      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0010d4:	481e      	ldr	r0, [pc, #120]	; (1a001150 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0010d6:	e036      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0010d8:	4b1e      	ldr	r3, [pc, #120]	; (1a001154 <Chip_Clock_GetClockInputHz+0xa0>)
1a0010da:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0010de:	f003 0307 	and.w	r3, r3, #7
1a0010e2:	2b04      	cmp	r3, #4
1a0010e4:	d130      	bne.n	1a001148 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0010e6:	2000      	movs	r0, #0
1a0010e8:	e02d      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0010ea:	4b1a      	ldr	r3, [pc, #104]	; (1a001154 <Chip_Clock_GetClockInputHz+0xa0>)
1a0010ec:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0010f0:	f003 0307 	and.w	r3, r3, #7
1a0010f4:	2b04      	cmp	r3, #4
1a0010f6:	d029      	beq.n	1a00114c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0010f8:	4817      	ldr	r0, [pc, #92]	; (1a001158 <Chip_Clock_GetClockInputHz+0xa4>)
1a0010fa:	e024      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0010fc:	4b17      	ldr	r3, [pc, #92]	; (1a00115c <Chip_Clock_GetClockInputHz+0xa8>)
1a0010fe:	6818      	ldr	r0, [r3, #0]
		break;
1a001100:	e021      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001102:	4b17      	ldr	r3, [pc, #92]	; (1a001160 <Chip_Clock_GetClockInputHz+0xac>)
1a001104:	6818      	ldr	r0, [r3, #0]
		break;
1a001106:	e01e      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001108:	4b16      	ldr	r3, [pc, #88]	; (1a001164 <Chip_Clock_GetClockInputHz+0xb0>)
1a00110a:	6818      	ldr	r0, [r3, #0]
		break;
1a00110c:	e01b      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00110e:	4b15      	ldr	r3, [pc, #84]	; (1a001164 <Chip_Clock_GetClockInputHz+0xb0>)
1a001110:	6858      	ldr	r0, [r3, #4]
		break;
1a001112:	e018      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001114:	f000 f86a 	bl	1a0011ec <Chip_Clock_GetMainPLLHz>
		break;
1a001118:	e015      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00111a:	2100      	movs	r1, #0
1a00111c:	f000 f89c 	bl	1a001258 <Chip_Clock_GetDivRate>
		break;
1a001120:	e011      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001122:	2101      	movs	r1, #1
1a001124:	f000 f898 	bl	1a001258 <Chip_Clock_GetDivRate>
		break;
1a001128:	e00d      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00112a:	2102      	movs	r1, #2
1a00112c:	f000 f894 	bl	1a001258 <Chip_Clock_GetDivRate>
		break;
1a001130:	e009      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001132:	2103      	movs	r1, #3
1a001134:	f000 f890 	bl	1a001258 <Chip_Clock_GetDivRate>
		break;
1a001138:	e005      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00113a:	2104      	movs	r1, #4
1a00113c:	f000 f88c 	bl	1a001258 <Chip_Clock_GetDivRate>
		break;
1a001140:	e001      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a001142:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001146:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a001148:	4803      	ldr	r0, [pc, #12]	; (1a001158 <Chip_Clock_GetClockInputHz+0xa4>)
1a00114a:	e7fc      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a00114c:	4806      	ldr	r0, [pc, #24]	; (1a001168 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00114e:	e7fa      	b.n	1a001146 <Chip_Clock_GetClockInputHz+0x92>
1a001150:	00b71b00 	.word	0x00b71b00
1a001154:	40043000 	.word	0x40043000
1a001158:	017d7840 	.word	0x017d7840
1a00115c:	1a00234c 	.word	0x1a00234c
1a001160:	1a002378 	.word	0x1a002378
1a001164:	10000854 	.word	0x10000854
1a001168:	02faf080 	.word	0x02faf080

1a00116c <Chip_Clock_CalcMainPLLValue>:
{
1a00116c:	b538      	push	{r3, r4, r5, lr}
1a00116e:	4605      	mov	r5, r0
1a001170:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001172:	7908      	ldrb	r0, [r1, #4]
1a001174:	f7ff ff9e 	bl	1a0010b4 <Chip_Clock_GetClockInputHz>
1a001178:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00117a:	4b19      	ldr	r3, [pc, #100]	; (1a0011e0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00117c:	442b      	add	r3, r5
1a00117e:	4a19      	ldr	r2, [pc, #100]	; (1a0011e4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001180:	4293      	cmp	r3, r2
1a001182:	d821      	bhi.n	1a0011c8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001184:	b318      	cbz	r0, 1a0011ce <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001186:	2380      	movs	r3, #128	; 0x80
1a001188:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00118a:	2300      	movs	r3, #0
1a00118c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00118e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001190:	fbb5 f3f0 	udiv	r3, r5, r0
1a001194:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001196:	4a14      	ldr	r2, [pc, #80]	; (1a0011e8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001198:	4295      	cmp	r5, r2
1a00119a:	d903      	bls.n	1a0011a4 <Chip_Clock_CalcMainPLLValue+0x38>
1a00119c:	fb03 f000 	mul.w	r0, r3, r0
1a0011a0:	42a8      	cmp	r0, r5
1a0011a2:	d007      	beq.n	1a0011b4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0011a4:	4621      	mov	r1, r4
1a0011a6:	4628      	mov	r0, r5
1a0011a8:	f7ff fe96 	bl	1a000ed8 <pll_get_frac>
		if (!ppll->nsel) {
1a0011ac:	68a3      	ldr	r3, [r4, #8]
1a0011ae:	b18b      	cbz	r3, 1a0011d4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0011b0:	3b01      	subs	r3, #1
1a0011b2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0011b4:	6923      	ldr	r3, [r4, #16]
1a0011b6:	b183      	cbz	r3, 1a0011da <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0011b8:	68e2      	ldr	r2, [r4, #12]
1a0011ba:	b10a      	cbz	r2, 1a0011c0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0011bc:	3a01      	subs	r2, #1
1a0011be:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0011c0:	3b01      	subs	r3, #1
1a0011c2:	6123      	str	r3, [r4, #16]
	return 0;
1a0011c4:	2000      	movs	r0, #0
}
1a0011c6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0011c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0011cc:	e7fb      	b.n	1a0011c6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0011ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0011d2:	e7f8      	b.n	1a0011c6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0011d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0011d8:	e7f5      	b.n	1a0011c6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0011da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0011de:	e7f2      	b.n	1a0011c6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0011e0:	ff6b3a10 	.word	0xff6b3a10
1a0011e4:	0b940510 	.word	0x0b940510
1a0011e8:	094c5eff 	.word	0x094c5eff

1a0011ec <Chip_Clock_GetMainPLLHz>:
{
1a0011ec:	b530      	push	{r4, r5, lr}
1a0011ee:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0011f0:	4d17      	ldr	r5, [pc, #92]	; (1a001250 <Chip_Clock_GetMainPLLHz+0x64>)
1a0011f2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0011f4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0011f8:	f7ff ff5c 	bl	1a0010b4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0011fc:	4b15      	ldr	r3, [pc, #84]	; (1a001254 <Chip_Clock_GetMainPLLHz+0x68>)
1a0011fe:	681b      	ldr	r3, [r3, #0]
1a001200:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001202:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001204:	f013 0f01 	tst.w	r3, #1
1a001208:	d01f      	beq.n	1a00124a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a00120a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00120e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001212:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001216:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00121a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00121c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00121e:	f10d 0c08 	add.w	ip, sp, #8
1a001222:	4461      	add	r1, ip
1a001224:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001228:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00122c:	d108      	bne.n	1a001240 <Chip_Clock_GetMainPLLHz+0x54>
1a00122e:	b93d      	cbnz	r5, 1a001240 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001230:	0049      	lsls	r1, r1, #1
1a001232:	fbb3 f3f1 	udiv	r3, r3, r1
1a001236:	fbb0 f0f2 	udiv	r0, r0, r2
1a00123a:	fb00 f003 	mul.w	r0, r0, r3
1a00123e:	e005      	b.n	1a00124c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001240:	fbb0 f0f2 	udiv	r0, r0, r2
1a001244:	fb03 f000 	mul.w	r0, r3, r0
1a001248:	e000      	b.n	1a00124c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00124a:	2000      	movs	r0, #0
}
1a00124c:	b003      	add	sp, #12
1a00124e:	bd30      	pop	{r4, r5, pc}
1a001250:	40050000 	.word	0x40050000
1a001254:	1a002404 	.word	0x1a002404

1a001258 <Chip_Clock_GetDivRate>:
{
1a001258:	b538      	push	{r3, r4, r5, lr}
1a00125a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00125c:	4608      	mov	r0, r1
1a00125e:	f7ff ff0d 	bl	1a00107c <Chip_Clock_GetDividerSource>
1a001262:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001264:	4620      	mov	r0, r4
1a001266:	f7ff ff17 	bl	1a001098 <Chip_Clock_GetDividerDivisor>
1a00126a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00126c:	4628      	mov	r0, r5
1a00126e:	f7ff ff21 	bl	1a0010b4 <Chip_Clock_GetClockInputHz>
1a001272:	3401      	adds	r4, #1
}
1a001274:	fbb0 f0f4 	udiv	r0, r0, r4
1a001278:	bd38      	pop	{r3, r4, r5, pc}
1a00127a:	Address 0x000000001a00127a is out of bounds.


1a00127c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00127c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00127e:	f100 0416 	add.w	r4, r0, #22
1a001282:	00a4      	lsls	r4, r4, #2
1a001284:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001288:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00128c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00128e:	281b      	cmp	r0, #27
1a001290:	d813      	bhi.n	1a0012ba <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001292:	2911      	cmp	r1, #17
1a001294:	d01a      	beq.n	1a0012cc <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001296:	4d0e      	ldr	r5, [pc, #56]	; (1a0012d0 <Chip_Clock_SetBaseClock+0x54>)
1a001298:	4025      	ands	r5, r4

			if (autoblocken) {
1a00129a:	b10a      	cbz	r2, 1a0012a0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00129c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0012a0:	b10b      	cbz	r3, 1a0012a6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0012a2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0012a6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0012aa:	3016      	adds	r0, #22
1a0012ac:	0080      	lsls	r0, r0, #2
1a0012ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012b2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012b6:	6045      	str	r5, [r0, #4]
1a0012b8:	e008      	b.n	1a0012cc <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0012ba:	f044 0401 	orr.w	r4, r4, #1
1a0012be:	3016      	adds	r0, #22
1a0012c0:	0080      	lsls	r0, r0, #2
1a0012c2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012c6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012ca:	6044      	str	r4, [r0, #4]
	}
}
1a0012cc:	bc30      	pop	{r4, r5}
1a0012ce:	4770      	bx	lr
1a0012d0:	e0fff7fe 	.word	0xe0fff7fe

1a0012d4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0012d4:	281b      	cmp	r0, #27
1a0012d6:	d80c      	bhi.n	1a0012f2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0012d8:	3016      	adds	r0, #22
1a0012da:	0080      	lsls	r0, r0, #2
1a0012dc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012e0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012e4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0012e6:	f010 0f01 	tst.w	r0, #1
1a0012ea:	d104      	bne.n	1a0012f6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0012ec:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0012f0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012f2:	2011      	movs	r0, #17
1a0012f4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012f6:	2011      	movs	r0, #17
}
1a0012f8:	4770      	bx	lr

1a0012fa <Chip_Clock_GetBaseClocktHz>:
{
1a0012fa:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0012fc:	f7ff ffea 	bl	1a0012d4 <Chip_Clock_GetBaseClock>
1a001300:	f7ff fed8 	bl	1a0010b4 <Chip_Clock_GetClockInputHz>
}
1a001304:	bd08      	pop	{r3, pc}
1a001306:	Address 0x000000001a001306 is out of bounds.


1a001308 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001308:	b969      	cbnz	r1, 1a001326 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00130a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00130c:	b10a      	cbz	r2, 1a001312 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00130e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001312:	2b02      	cmp	r3, #2
1a001314:	d009      	beq.n	1a00132a <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001316:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00131a:	d209      	bcs.n	1a001330 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00131c:	3020      	adds	r0, #32
1a00131e:	4b07      	ldr	r3, [pc, #28]	; (1a00133c <Chip_Clock_EnableOpts+0x34>)
1a001320:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001324:	4770      	bx	lr
		reg |= (1 << 1);
1a001326:	2103      	movs	r1, #3
1a001328:	e7f0      	b.n	1a00130c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00132a:	f041 0120 	orr.w	r1, r1, #32
1a00132e:	e7f2      	b.n	1a001316 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001330:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001334:	4b02      	ldr	r3, [pc, #8]	; (1a001340 <Chip_Clock_EnableOpts+0x38>)
1a001336:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00133a:	4770      	bx	lr
1a00133c:	40051000 	.word	0x40051000
1a001340:	40052000 	.word	0x40052000

1a001344 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001344:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001348:	d208      	bcs.n	1a00135c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00134a:	4a09      	ldr	r2, [pc, #36]	; (1a001370 <Chip_Clock_Enable+0x2c>)
1a00134c:	3020      	adds	r0, #32
1a00134e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001352:	f043 0301 	orr.w	r3, r3, #1
1a001356:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00135a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00135c:	4a05      	ldr	r2, [pc, #20]	; (1a001374 <Chip_Clock_Enable+0x30>)
1a00135e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001362:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001366:	f043 0301 	orr.w	r3, r3, #1
1a00136a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00136e:	4770      	bx	lr
1a001370:	40051000 	.word	0x40051000
1a001374:	40052000 	.word	0x40052000

1a001378 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001378:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00137a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00137e:	d309      	bcc.n	1a001394 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001380:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001384:	4a0d      	ldr	r2, [pc, #52]	; (1a0013bc <Chip_Clock_GetRate+0x44>)
1a001386:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00138a:	f014 0f01 	tst.w	r4, #1
1a00138e:	d107      	bne.n	1a0013a0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001390:	2000      	movs	r0, #0
	}

	return rate;
}
1a001392:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001394:	f100 0320 	add.w	r3, r0, #32
1a001398:	4a09      	ldr	r2, [pc, #36]	; (1a0013c0 <Chip_Clock_GetRate+0x48>)
1a00139a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00139e:	e7f4      	b.n	1a00138a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0013a0:	f7ff fe20 	bl	1a000fe4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0013a4:	f7ff ffa9 	bl	1a0012fa <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0013a8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0013ac:	d103      	bne.n	1a0013b6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0013ae:	2301      	movs	r3, #1
		rate = rate / div;
1a0013b0:	fbb0 f0f3 	udiv	r0, r0, r3
1a0013b4:	e7ed      	b.n	1a001392 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0013b6:	2302      	movs	r3, #2
1a0013b8:	e7fa      	b.n	1a0013b0 <Chip_Clock_GetRate+0x38>
1a0013ba:	bf00      	nop
1a0013bc:	40052000 	.word	0x40052000
1a0013c0:	40051000 	.word	0x40051000

1a0013c4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0013c4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0013c6:	2069      	movs	r0, #105	; 0x69
1a0013c8:	f7ff ffd6 	bl	1a001378 <Chip_Clock_GetRate>
1a0013cc:	4b01      	ldr	r3, [pc, #4]	; (1a0013d4 <SystemCoreClockUpdate+0x10>)
1a0013ce:	6018      	str	r0, [r3, #0]
}
1a0013d0:	bd08      	pop	{r3, pc}
1a0013d2:	bf00      	nop
1a0013d4:	10000870 	.word	0x10000870

1a0013d8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0013d8:	b570      	push	{r4, r5, r6, lr}
1a0013da:	b08a      	sub	sp, #40	; 0x28
1a0013dc:	4605      	mov	r5, r0
1a0013de:	460e      	mov	r6, r1
1a0013e0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0013e2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0013e6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0013e8:	2806      	cmp	r0, #6
1a0013ea:	d018      	beq.n	1a00141e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0013ec:	2300      	movs	r3, #0
1a0013ee:	2201      	movs	r2, #1
1a0013f0:	4629      	mov	r1, r5
1a0013f2:	2004      	movs	r0, #4
1a0013f4:	f7ff ff42 	bl	1a00127c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0013f8:	4a49      	ldr	r2, [pc, #292]	; (1a001520 <Chip_SetupCoreClock+0x148>)
1a0013fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0013fc:	f043 0301 	orr.w	r3, r3, #1
1a001400:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001402:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001406:	a901      	add	r1, sp, #4
1a001408:	4630      	mov	r0, r6
1a00140a:	f7ff feaf 	bl	1a00116c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00140e:	4b45      	ldr	r3, [pc, #276]	; (1a001524 <Chip_SetupCoreClock+0x14c>)
1a001410:	429e      	cmp	r6, r3
1a001412:	d916      	bls.n	1a001442 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001414:	9b01      	ldr	r3, [sp, #4]
1a001416:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00141a:	d003      	beq.n	1a001424 <Chip_SetupCoreClock+0x4c>
1a00141c:	e7fe      	b.n	1a00141c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00141e:	f7ff fe07 	bl	1a001030 <Chip_Clock_EnableCrystal>
1a001422:	e7e3      	b.n	1a0013ec <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a001424:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001428:	d005      	beq.n	1a001436 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00142a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00142e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001430:	2500      	movs	r5, #0
			direct = 1;
1a001432:	2601      	movs	r6, #1
1a001434:	e007      	b.n	1a001446 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001436:	9b04      	ldr	r3, [sp, #16]
1a001438:	3301      	adds	r3, #1
1a00143a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00143c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00143e:	2600      	movs	r6, #0
1a001440:	e001      	b.n	1a001446 <Chip_SetupCoreClock+0x6e>
1a001442:	2500      	movs	r5, #0
1a001444:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001446:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00144a:	9b01      	ldr	r3, [sp, #4]
1a00144c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001450:	9a05      	ldr	r2, [sp, #20]
1a001452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001456:	9a03      	ldr	r2, [sp, #12]
1a001458:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00145c:	9a04      	ldr	r2, [sp, #16]
1a00145e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001462:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001466:	4a2e      	ldr	r2, [pc, #184]	; (1a001520 <Chip_SetupCoreClock+0x148>)
1a001468:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00146a:	4b2d      	ldr	r3, [pc, #180]	; (1a001520 <Chip_SetupCoreClock+0x148>)
1a00146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00146e:	f013 0f01 	tst.w	r3, #1
1a001472:	d0fa      	beq.n	1a00146a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001474:	2300      	movs	r3, #0
1a001476:	2201      	movs	r2, #1
1a001478:	2109      	movs	r1, #9
1a00147a:	2004      	movs	r0, #4
1a00147c:	f7ff fefe 	bl	1a00127c <Chip_Clock_SetBaseClock>

	if (direct) {
1a001480:	b1fe      	cbz	r6, 1a0014c2 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001482:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001486:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001488:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00148a:	1e5a      	subs	r2, r3, #1
1a00148c:	9209      	str	r2, [sp, #36]	; 0x24
1a00148e:	2b00      	cmp	r3, #0
1a001490:	d1fa      	bne.n	1a001488 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001492:	9b01      	ldr	r3, [sp, #4]
1a001494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001498:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00149a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00149e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0014a2:	9a05      	ldr	r2, [sp, #20]
1a0014a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0014a8:	9a03      	ldr	r2, [sp, #12]
1a0014aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0014ae:	9a04      	ldr	r2, [sp, #16]
1a0014b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0014b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0014b8:	4a19      	ldr	r2, [pc, #100]	; (1a001520 <Chip_SetupCoreClock+0x148>)
1a0014ba:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0014bc:	b36c      	cbz	r4, 1a00151a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0014be:	2400      	movs	r4, #0
1a0014c0:	e029      	b.n	1a001516 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0014c2:	2d00      	cmp	r5, #0
1a0014c4:	d0fa      	beq.n	1a0014bc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0014c6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0014ca:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0014cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0014ce:	1e5a      	subs	r2, r3, #1
1a0014d0:	9209      	str	r2, [sp, #36]	; 0x24
1a0014d2:	2b00      	cmp	r3, #0
1a0014d4:	d1fa      	bne.n	1a0014cc <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0014d6:	9b04      	ldr	r3, [sp, #16]
1a0014d8:	1e5a      	subs	r2, r3, #1
1a0014da:	9204      	str	r2, [sp, #16]
1a0014dc:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0014e0:	9b01      	ldr	r3, [sp, #4]
1a0014e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0014e6:	9905      	ldr	r1, [sp, #20]
1a0014e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0014ec:	9903      	ldr	r1, [sp, #12]
1a0014ee:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0014f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0014f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0014fa:	4a09      	ldr	r2, [pc, #36]	; (1a001520 <Chip_SetupCoreClock+0x148>)
1a0014fc:	6453      	str	r3, [r2, #68]	; 0x44
1a0014fe:	e7dd      	b.n	1a0014bc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001500:	4809      	ldr	r0, [pc, #36]	; (1a001528 <Chip_SetupCoreClock+0x150>)
1a001502:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001506:	78cb      	ldrb	r3, [r1, #3]
1a001508:	788a      	ldrb	r2, [r1, #2]
1a00150a:	7849      	ldrb	r1, [r1, #1]
1a00150c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001510:	f7ff feb4 	bl	1a00127c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001514:	3401      	adds	r4, #1
1a001516:	2c11      	cmp	r4, #17
1a001518:	d9f2      	bls.n	1a001500 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00151a:	b00a      	add	sp, #40	; 0x28
1a00151c:	bd70      	pop	{r4, r5, r6, pc}
1a00151e:	bf00      	nop
1a001520:	40050000 	.word	0x40050000
1a001524:	068e7780 	.word	0x068e7780
1a001528:	1a00247c 	.word	0x1a00247c

1a00152c <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a00152c:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00152e:	6843      	ldr	r3, [r0, #4]
1a001530:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001534:	2b30      	cmp	r3, #48	; 0x30
1a001536:	d04a      	beq.n	1a0015ce <Chip_I2CM_XferHandler+0xa2>
1a001538:	d90f      	bls.n	1a00155a <Chip_I2CM_XferHandler+0x2e>
1a00153a:	2b48      	cmp	r3, #72	; 0x48
1a00153c:	d06a      	beq.n	1a001614 <Chip_I2CM_XferHandler+0xe8>
1a00153e:	d83a      	bhi.n	1a0015b6 <Chip_I2CM_XferHandler+0x8a>
1a001540:	2b38      	cmp	r3, #56	; 0x38
1a001542:	d06b      	beq.n	1a00161c <Chip_I2CM_XferHandler+0xf0>
1a001544:	2b40      	cmp	r3, #64	; 0x40
1a001546:	d13e      	bne.n	1a0015c6 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001548:	88ca      	ldrh	r2, [r1, #6]
1a00154a:	2a01      	cmp	r2, #1
1a00154c:	d95a      	bls.n	1a001604 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a00154e:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a001550:	b9b2      	cbnz	r2, 1a001580 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a001552:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001554:	f023 0310 	bic.w	r3, r3, #16
1a001558:	e012      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00155a:	2b10      	cmp	r3, #16
1a00155c:	d007      	beq.n	1a00156e <Chip_I2CM_XferHandler+0x42>
1a00155e:	d81c      	bhi.n	1a00159a <Chip_I2CM_XferHandler+0x6e>
1a001560:	b91b      	cbnz	r3, 1a00156a <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a001562:	2303      	movs	r3, #3
1a001564:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001566:	232c      	movs	r3, #44	; 0x2c
        break;
1a001568:	e00a      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00156a:	2b08      	cmp	r3, #8
1a00156c:	d12b      	bne.n	1a0015c6 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00156e:	780a      	ldrb	r2, [r1, #0]
1a001570:	888b      	ldrh	r3, [r1, #4]
1a001572:	fab3 f383 	clz	r3, r3
1a001576:	095b      	lsrs	r3, r3, #5
1a001578:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a00157c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00157e:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001580:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001584:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a001586:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a00158a:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a00158c:	8848      	ldrh	r0, [r1, #2]
1a00158e:	38ff      	subs	r0, #255	; 0xff
1a001590:	bf18      	it	ne
1a001592:	2001      	movne	r0, #1
}
1a001594:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001598:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00159a:	2b20      	cmp	r3, #32
1a00159c:	d017      	beq.n	1a0015ce <Chip_I2CM_XferHandler+0xa2>
1a00159e:	2b28      	cmp	r3, #40	; 0x28
1a0015a0:	d001      	beq.n	1a0015a6 <Chip_I2CM_XferHandler+0x7a>
1a0015a2:	2b18      	cmp	r3, #24
1a0015a4:	d10f      	bne.n	1a0015c6 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a0015a6:	888b      	ldrh	r3, [r1, #4]
1a0015a8:	b9cb      	cbnz	r3, 1a0015de <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a0015aa:	88cb      	ldrh	r3, [r1, #6]
1a0015ac:	2b00      	cmp	r3, #0
1a0015ae:	d139      	bne.n	1a001624 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0015b0:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0015b2:	232c      	movs	r3, #44	; 0x2c
1a0015b4:	e7e4      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0015b6:	2b58      	cmp	r3, #88	; 0x58
1a0015b8:	d01b      	beq.n	1a0015f2 <Chip_I2CM_XferHandler+0xc6>
1a0015ba:	2bf8      	cmp	r3, #248	; 0xf8
1a0015bc:	d101      	bne.n	1a0015c2 <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0015be:	2000      	movs	r0, #0
1a0015c0:	e7e8      	b.n	1a001594 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0015c2:	2b50      	cmp	r3, #80	; 0x50
1a0015c4:	d015      	beq.n	1a0015f2 <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0015c6:	2301      	movs	r3, #1
1a0015c8:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0015ca:	232c      	movs	r3, #44	; 0x2c
        break;
1a0015cc:	e7d8      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0015ce:	784b      	ldrb	r3, [r1, #1]
1a0015d0:	f013 0f01 	tst.w	r3, #1
1a0015d4:	d1e7      	bne.n	1a0015a6 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a0015d6:	2302      	movs	r3, #2
1a0015d8:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0015da:	232c      	movs	r3, #44	; 0x2c
			break;
1a0015dc:	e7d0      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a0015de:	688b      	ldr	r3, [r1, #8]
1a0015e0:	1c5a      	adds	r2, r3, #1
1a0015e2:	608a      	str	r2, [r1, #8]
1a0015e4:	781b      	ldrb	r3, [r3, #0]
1a0015e6:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0015e8:	888b      	ldrh	r3, [r1, #4]
1a0015ea:	3b01      	subs	r3, #1
1a0015ec:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a0015ee:	233c      	movs	r3, #60	; 0x3c
1a0015f0:	e7c6      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a0015f2:	6882      	ldr	r2, [r0, #8]
1a0015f4:	68cb      	ldr	r3, [r1, #12]
1a0015f6:	1c5c      	adds	r4, r3, #1
1a0015f8:	60cc      	str	r4, [r1, #12]
1a0015fa:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a0015fc:	88cb      	ldrh	r3, [r1, #6]
1a0015fe:	3b01      	subs	r3, #1
1a001600:	80cb      	strh	r3, [r1, #6]
1a001602:	e7a1      	b.n	1a001548 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001604:	784b      	ldrb	r3, [r1, #1]
1a001606:	f013 0f02 	tst.w	r3, #2
1a00160a:	d101      	bne.n	1a001610 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a00160c:	233c      	movs	r3, #60	; 0x3c
1a00160e:	e79f      	b.n	1a001550 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a001610:	2338      	movs	r3, #56	; 0x38
1a001612:	e79d      	b.n	1a001550 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a001614:	2304      	movs	r3, #4
1a001616:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001618:	232c      	movs	r3, #44	; 0x2c
		break;
1a00161a:	e7b1      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a00161c:	2305      	movs	r3, #5
1a00161e:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a001620:	233c      	movs	r3, #60	; 0x3c
		break;
1a001622:	e7ad      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a001624:	231c      	movs	r3, #28
1a001626:	e7ab      	b.n	1a001580 <Chip_I2CM_XferHandler+0x54>

1a001628 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a001628:	23ff      	movs	r3, #255	; 0xff
1a00162a:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a00162c:	232c      	movs	r3, #44	; 0x2c
1a00162e:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a001630:	2360      	movs	r3, #96	; 0x60
1a001632:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a001634:	4770      	bx	lr

1a001636 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a001636:	b538      	push	{r3, r4, r5, lr}
1a001638:	4604      	mov	r4, r0
1a00163a:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a00163c:	f7ff fff4 	bl	1a001628 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a001640:	2000      	movs	r0, #0

	while (ret == 0) {
1a001642:	e007      	b.n	1a001654 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a001644:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a001646:	f013 0f08 	tst.w	r3, #8
1a00164a:	d0fb      	beq.n	1a001644 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a00164c:	4629      	mov	r1, r5
1a00164e:	4620      	mov	r0, r4
1a001650:	f7ff ff6c 	bl	1a00152c <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a001654:	2800      	cmp	r0, #0
1a001656:	d0f5      	beq.n	1a001644 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a001658:	bd38      	pop	{r3, r4, r5, pc}

1a00165a <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00165a:	4770      	bx	lr

1a00165c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00165c:	4b03      	ldr	r3, [pc, #12]	; (1a00166c <Chip_SSP_GetClockIndex+0x10>)
1a00165e:	4298      	cmp	r0, r3
1a001660:	d001      	beq.n	1a001666 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001662:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001664:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001666:	20a5      	movs	r0, #165	; 0xa5
1a001668:	4770      	bx	lr
1a00166a:	bf00      	nop
1a00166c:	400c5000 	.word	0x400c5000

1a001670 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001670:	4b04      	ldr	r3, [pc, #16]	; (1a001684 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001672:	4298      	cmp	r0, r3
1a001674:	d002      	beq.n	1a00167c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001676:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00167a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00167c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001680:	4770      	bx	lr
1a001682:	bf00      	nop
1a001684:	400c5000 	.word	0x400c5000

1a001688 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001688:	6803      	ldr	r3, [r0, #0]
1a00168a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00168e:	0209      	lsls	r1, r1, #8
1a001690:	b289      	uxth	r1, r1
1a001692:	4319      	orrs	r1, r3
1a001694:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001696:	6102      	str	r2, [r0, #16]
}
1a001698:	4770      	bx	lr

1a00169a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00169a:	b570      	push	{r4, r5, r6, lr}
1a00169c:	4606      	mov	r6, r0
1a00169e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0016a0:	f7ff ffe6 	bl	1a001670 <Chip_SSP_GetPeriphClockIndex>
1a0016a4:	f7ff fe68 	bl	1a001378 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0016a8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0016aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0016ae:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0016b0:	e000      	b.n	1a0016b4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0016b2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0016b4:	42ab      	cmp	r3, r5
1a0016b6:	d90b      	bls.n	1a0016d0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0016b8:	1c4c      	adds	r4, r1, #1
1a0016ba:	fb02 f304 	mul.w	r3, r2, r4
1a0016be:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0016c2:	429d      	cmp	r5, r3
1a0016c4:	d2f6      	bcs.n	1a0016b4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0016c6:	2cff      	cmp	r4, #255	; 0xff
1a0016c8:	d9f3      	bls.n	1a0016b2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0016ca:	3202      	adds	r2, #2
				cr0_div = 0;
1a0016cc:	2100      	movs	r1, #0
1a0016ce:	e7f1      	b.n	1a0016b4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0016d0:	4630      	mov	r0, r6
1a0016d2:	f7ff ffd9 	bl	1a001688 <Chip_SSP_SetClockRate>
}
1a0016d6:	bd70      	pop	{r4, r5, r6, pc}

1a0016d8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0016d8:	b510      	push	{r4, lr}
1a0016da:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0016dc:	f7ff ffbe 	bl	1a00165c <Chip_SSP_GetClockIndex>
1a0016e0:	f7ff fe30 	bl	1a001344 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0016e4:	4620      	mov	r0, r4
1a0016e6:	f7ff ffc3 	bl	1a001670 <Chip_SSP_GetPeriphClockIndex>
1a0016ea:	f7ff fe2b 	bl	1a001344 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0016ee:	6863      	ldr	r3, [r4, #4]
1a0016f0:	f023 0304 	bic.w	r3, r3, #4
1a0016f4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0016f6:	6823      	ldr	r3, [r4, #0]
1a0016f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0016fc:	f043 0307 	orr.w	r3, r3, #7
1a001700:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001702:	4902      	ldr	r1, [pc, #8]	; (1a00170c <Chip_SSP_Init+0x34>)
1a001704:	4620      	mov	r0, r4
1a001706:	f7ff ffc8 	bl	1a00169a <Chip_SSP_SetBitRate>
}
1a00170a:	bd10      	pop	{r4, pc}
1a00170c:	000186a0 	.word	0x000186a0

1a001710 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001710:	2901      	cmp	r1, #1
1a001712:	d000      	beq.n	1a001716 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a001714:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a001716:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00171a:	0082      	lsls	r2, r0, #2
1a00171c:	4b03      	ldr	r3, [pc, #12]	; (1a00172c <Chip_I2C_EventHandler+0x1c>)
1a00171e:	4413      	add	r3, r2
1a001720:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a001722:	7d13      	ldrb	r3, [r2, #20]
1a001724:	b2db      	uxtb	r3, r3
1a001726:	2b04      	cmp	r3, #4
1a001728:	d0fb      	beq.n	1a001722 <Chip_I2C_EventHandler+0x12>
1a00172a:	e7f3      	b.n	1a001714 <Chip_I2C_EventHandler+0x4>
1a00172c:	10000808 	.word	0x10000808

1a001730 <handleMasterXferState>:
{
1a001730:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a001732:	6843      	ldr	r3, [r0, #4]
1a001734:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a001738:	2b58      	cmp	r3, #88	; 0x58
1a00173a:	d87e      	bhi.n	1a00183a <handleMasterXferState+0x10a>
1a00173c:	e8df f003 	tbb	[pc, r3]
1a001740:	7d7d7d79 	.word	0x7d7d7d79
1a001744:	7d7d7d7d 	.word	0x7d7d7d7d
1a001748:	7d7d7d2f 	.word	0x7d7d7d2f
1a00174c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001750:	7d7d7d2f 	.word	0x7d7d7d2f
1a001754:	7d7d7d7d 	.word	0x7d7d7d7d
1a001758:	7d7d7d39 	.word	0x7d7d7d39
1a00175c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001760:	7d7d7d6d 	.word	0x7d7d7d6d
1a001764:	7d7d7d7d 	.word	0x7d7d7d7d
1a001768:	7d7d7d39 	.word	0x7d7d7d39
1a00176c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001770:	7d7d7d71 	.word	0x7d7d7d71
1a001774:	7d7d7d7d 	.word	0x7d7d7d7d
1a001778:	7d7d7d75 	.word	0x7d7d7d75
1a00177c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001780:	7d7d7d6b 	.word	0x7d7d7d6b
1a001784:	7d7d7d7d 	.word	0x7d7d7d7d
1a001788:	7d7d7d6d 	.word	0x7d7d7d6d
1a00178c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001790:	7d7d7d2d 	.word	0x7d7d7d2d
1a001794:	7d7d7d7d 	.word	0x7d7d7d7d
1a001798:	4f          	.byte	0x4f
1a001799:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00179a:	233c      	movs	r3, #60	; 0x3c
1a00179c:	e020      	b.n	1a0017e0 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00179e:	780a      	ldrb	r2, [r1, #0]
1a0017a0:	688b      	ldr	r3, [r1, #8]
1a0017a2:	fab3 f383 	clz	r3, r3
1a0017a6:	095b      	lsrs	r3, r3, #5
1a0017a8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0017ac:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0017ae:	233c      	movs	r3, #60	; 0x3c
		break;
1a0017b0:	e023      	b.n	1a0017fa <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a0017b2:	688b      	ldr	r3, [r1, #8]
1a0017b4:	b94b      	cbnz	r3, 1a0017ca <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0017b6:	690b      	ldr	r3, [r1, #16]
1a0017b8:	b123      	cbz	r3, 1a0017c4 <handleMasterXferState+0x94>
1a0017ba:	f06f 0320 	mvn.w	r3, #32
1a0017be:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0017c2:	e01a      	b.n	1a0017fa <handleMasterXferState+0xca>
1a0017c4:	f06f 0310 	mvn.w	r3, #16
1a0017c8:	e7f9      	b.n	1a0017be <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a0017ca:	684b      	ldr	r3, [r1, #4]
1a0017cc:	1c5a      	adds	r2, r3, #1
1a0017ce:	604a      	str	r2, [r1, #4]
1a0017d0:	781b      	ldrb	r3, [r3, #0]
1a0017d2:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0017d4:	688b      	ldr	r3, [r1, #8]
1a0017d6:	3b01      	subs	r3, #1
1a0017d8:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0017da:	233c      	movs	r3, #60	; 0x3c
1a0017dc:	e00d      	b.n	1a0017fa <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a0017de:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a0017e0:	6884      	ldr	r4, [r0, #8]
1a0017e2:	68ca      	ldr	r2, [r1, #12]
1a0017e4:	1c55      	adds	r5, r2, #1
1a0017e6:	60cd      	str	r5, [r1, #12]
1a0017e8:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0017ea:	690a      	ldr	r2, [r1, #16]
1a0017ec:	3a01      	subs	r2, #1
1a0017ee:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0017f0:	690a      	ldr	r2, [r1, #16]
1a0017f2:	2a01      	cmp	r2, #1
1a0017f4:	dd01      	ble.n	1a0017fa <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0017f6:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0017fa:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0017fe:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a001800:	f023 0210 	bic.w	r2, r3, #16
1a001804:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a001806:	f013 0f10 	tst.w	r3, #16
1a00180a:	d018      	beq.n	1a00183e <handleMasterXferState+0x10e>
1a00180c:	7d0b      	ldrb	r3, [r1, #20]
1a00180e:	2b02      	cmp	r3, #2
1a001810:	d015      	beq.n	1a00183e <handleMasterXferState+0x10e>
	return 1;
1a001812:	2001      	movs	r0, #1
1a001814:	e017      	b.n	1a001846 <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a001816:	233c      	movs	r3, #60	; 0x3c
1a001818:	e7ea      	b.n	1a0017f0 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00181a:	2305      	movs	r3, #5
1a00181c:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00181e:	232c      	movs	r3, #44	; 0x2c
		break;
1a001820:	e7eb      	b.n	1a0017fa <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a001822:	2301      	movs	r3, #1
1a001824:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001826:	232c      	movs	r3, #44	; 0x2c
		break;
1a001828:	e7e7      	b.n	1a0017fa <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a00182a:	2302      	movs	r3, #2
1a00182c:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a00182e:	233c      	movs	r3, #60	; 0x3c
		break;
1a001830:	e7e3      	b.n	1a0017fa <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a001832:	2303      	movs	r3, #3
1a001834:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001836:	232c      	movs	r3, #44	; 0x2c
1a001838:	e7df      	b.n	1a0017fa <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00183a:	233c      	movs	r3, #60	; 0x3c
1a00183c:	e7dd      	b.n	1a0017fa <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a00183e:	7d0b      	ldrb	r3, [r1, #20]
1a001840:	2b04      	cmp	r3, #4
1a001842:	d002      	beq.n	1a00184a <handleMasterXferState+0x11a>
		return 0;
1a001844:	2000      	movs	r0, #0
}
1a001846:	bc30      	pop	{r4, r5}
1a001848:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a00184a:	2000      	movs	r0, #0
1a00184c:	7508      	strb	r0, [r1, #20]
1a00184e:	e7fa      	b.n	1a001846 <handleMasterXferState+0x116>

1a001850 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001850:	b570      	push	{r4, r5, r6, lr}
1a001852:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001854:	4e06      	ldr	r6, [pc, #24]	; (1a001870 <Chip_I2C_Init+0x20>)
1a001856:	00c4      	lsls	r4, r0, #3
1a001858:	1a22      	subs	r2, r4, r0
1a00185a:	0093      	lsls	r3, r2, #2
1a00185c:	4433      	add	r3, r6
1a00185e:	8898      	ldrh	r0, [r3, #4]
1a001860:	f7ff fd70 	bl	1a001344 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001864:	1b64      	subs	r4, r4, r5
1a001866:	00a3      	lsls	r3, r4, #2
1a001868:	58f3      	ldr	r3, [r6, r3]
1a00186a:	226c      	movs	r2, #108	; 0x6c
1a00186c:	619a      	str	r2, [r3, #24]
}
1a00186e:	bd70      	pop	{r4, r5, r6, pc}
1a001870:	10000808 	.word	0x10000808

1a001874 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001878:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00187a:	4e0b      	ldr	r6, [pc, #44]	; (1a0018a8 <Chip_I2C_SetClockRate+0x34>)
1a00187c:	00c5      	lsls	r5, r0, #3
1a00187e:	1a2b      	subs	r3, r5, r0
1a001880:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001884:	eb06 0308 	add.w	r3, r6, r8
1a001888:	8898      	ldrh	r0, [r3, #4]
1a00188a:	f7ff fd75 	bl	1a001378 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00188e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001892:	f856 3008 	ldr.w	r3, [r6, r8]
1a001896:	0842      	lsrs	r2, r0, #1
1a001898:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00189a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00189e:	691a      	ldr	r2, [r3, #16]
1a0018a0:	1a80      	subs	r0, r0, r2
1a0018a2:	6158      	str	r0, [r3, #20]
}
1a0018a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0018a8:	10000808 	.word	0x10000808

1a0018ac <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a0018ac:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0018b0:	009a      	lsls	r2, r3, #2
1a0018b2:	4b09      	ldr	r3, [pc, #36]	; (1a0018d8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0018b4:	4413      	add	r3, r2
1a0018b6:	691b      	ldr	r3, [r3, #16]
1a0018b8:	b153      	cbz	r3, 1a0018d0 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a0018ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0018be:	0082      	lsls	r2, r0, #2
1a0018c0:	4b05      	ldr	r3, [pc, #20]	; (1a0018d8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0018c2:	4413      	add	r3, r2
1a0018c4:	6898      	ldr	r0, [r3, #8]
}
1a0018c6:	4288      	cmp	r0, r1
1a0018c8:	bf14      	ite	ne
1a0018ca:	2000      	movne	r0, #0
1a0018cc:	2001      	moveq	r0, #1
1a0018ce:	4770      	bx	lr
		iic->mEvent = event;
1a0018d0:	4b01      	ldr	r3, [pc, #4]	; (1a0018d8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0018d2:	4413      	add	r3, r2
1a0018d4:	6099      	str	r1, [r3, #8]
1a0018d6:	e7f0      	b.n	1a0018ba <Chip_I2C_SetMasterEventHandler+0xe>
1a0018d8:	10000808 	.word	0x10000808

1a0018dc <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a0018dc:	b510      	push	{r4, lr}
1a0018de:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a0018e0:	4809      	ldr	r0, [pc, #36]	; (1a001908 <Chip_I2C_MasterStateHandler+0x2c>)
1a0018e2:	00e3      	lsls	r3, r4, #3
1a0018e4:	1b1b      	subs	r3, r3, r4
1a0018e6:	009a      	lsls	r2, r3, #2
1a0018e8:	1883      	adds	r3, r0, r2
1a0018ea:	6919      	ldr	r1, [r3, #16]
1a0018ec:	5880      	ldr	r0, [r0, r2]
1a0018ee:	f7ff ff1f 	bl	1a001730 <handleMasterXferState>
1a0018f2:	b940      	cbnz	r0, 1a001906 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0018f4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0018f8:	009a      	lsls	r2, r3, #2
1a0018fa:	4b03      	ldr	r3, [pc, #12]	; (1a001908 <Chip_I2C_MasterStateHandler+0x2c>)
1a0018fc:	4413      	add	r3, r2
1a0018fe:	689b      	ldr	r3, [r3, #8]
1a001900:	2102      	movs	r1, #2
1a001902:	4620      	mov	r0, r4
1a001904:	4798      	blx	r3
	}
}
1a001906:	bd10      	pop	{r4, pc}
1a001908:	10000808 	.word	0x10000808

1a00190c <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a00190c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001910:	0083      	lsls	r3, r0, #2
1a001912:	4a03      	ldr	r2, [pc, #12]	; (1a001920 <Chip_I2C_IsStateChanged+0x14>)
1a001914:	58d3      	ldr	r3, [r2, r3]
1a001916:	6818      	ldr	r0, [r3, #0]
}
1a001918:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a00191c:	4770      	bx	lr
1a00191e:	bf00      	nop
1a001920:	10000808 	.word	0x10000808

1a001924 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a001924:	2901      	cmp	r1, #1
1a001926:	d000      	beq.n	1a00192a <Chip_I2C_EventHandlerPolling+0x6>
1a001928:	4770      	bx	lr
{
1a00192a:	b538      	push	{r3, r4, r5, lr}
1a00192c:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a00192e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001932:	009a      	lsls	r2, r3, #2
1a001934:	4b08      	ldr	r3, [pc, #32]	; (1a001958 <Chip_I2C_EventHandlerPolling+0x34>)
1a001936:	4413      	add	r3, r2
1a001938:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a00193a:	7d2b      	ldrb	r3, [r5, #20]
1a00193c:	b2db      	uxtb	r3, r3
1a00193e:	2b04      	cmp	r3, #4
1a001940:	d108      	bne.n	1a001954 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a001942:	4620      	mov	r0, r4
1a001944:	f7ff ffe2 	bl	1a00190c <Chip_I2C_IsStateChanged>
1a001948:	2800      	cmp	r0, #0
1a00194a:	d0f6      	beq.n	1a00193a <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a00194c:	4620      	mov	r0, r4
1a00194e:	f7ff ffc5 	bl	1a0018dc <Chip_I2C_MasterStateHandler>
1a001952:	e7f2      	b.n	1a00193a <Chip_I2C_EventHandlerPolling+0x16>
}
1a001954:	bd38      	pop	{r3, r4, r5, pc}
1a001956:	bf00      	nop
1a001958:	10000808 	.word	0x10000808

1a00195c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00195c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00195e:	4a0b      	ldr	r2, [pc, #44]	; (1a00198c <SystemInit+0x30>)
1a001960:	4b0b      	ldr	r3, [pc, #44]	; (1a001990 <SystemInit+0x34>)
1a001962:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001964:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001968:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00196a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00196e:	2b20      	cmp	r3, #32
1a001970:	d004      	beq.n	1a00197c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001972:	f7ff f941 	bl	1a000bf8 <Board_SystemInit>
   Board_Init();
1a001976:	f7ff f8d1 	bl	1a000b1c <Board_Init>
}
1a00197a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00197c:	4a04      	ldr	r2, [pc, #16]	; (1a001990 <SystemInit+0x34>)
1a00197e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001982:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001986:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00198a:	e7f2      	b.n	1a001972 <SystemInit+0x16>
1a00198c:	1a000000 	.word	0x1a000000
1a001990:	e000ed00 	.word	0xe000ed00

1a001994 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001994:	4b04      	ldr	r3, [pc, #16]	; (1a0019a8 <cyclesCounterInit+0x14>)
1a001996:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001998:	4a04      	ldr	r2, [pc, #16]	; (1a0019ac <cyclesCounterInit+0x18>)
1a00199a:	6813      	ldr	r3, [r2, #0]
1a00199c:	f043 0301 	orr.w	r3, r3, #1
1a0019a0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0019a2:	2001      	movs	r0, #1
1a0019a4:	4770      	bx	lr
1a0019a6:	bf00      	nop
1a0019a8:	10000840 	.word	0x10000840
1a0019ac:	e0001000 	.word	0xe0001000

1a0019b0 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0019b0:	4b01      	ldr	r3, [pc, #4]	; (1a0019b8 <tickRead+0x8>)
1a0019b2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0019b6:	4770      	bx	lr
1a0019b8:	10000860 	.word	0x10000860

1a0019bc <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0019bc:	b918      	cbnz	r0, 1a0019c6 <tickPowerSet+0xa>
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0019be:	4b04      	ldr	r3, [pc, #16]	; (1a0019d0 <tickPowerSet+0x14>)
1a0019c0:	2200      	movs	r2, #0
1a0019c2:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0019c4:	4770      	bx	lr
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0019c6:	4b02      	ldr	r3, [pc, #8]	; (1a0019d0 <tickPowerSet+0x14>)
1a0019c8:	2207      	movs	r2, #7
1a0019ca:	601a      	str	r2, [r3, #0]
1a0019cc:	4770      	bx	lr
1a0019ce:	bf00      	nop
1a0019d0:	e000e010 	.word	0xe000e010

1a0019d4 <tickInit>:
{
1a0019d4:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0019d6:	ea50 0301 	orrs.w	r3, r0, r1
1a0019da:	d02a      	beq.n	1a001a32 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0019dc:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0019e0:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0019e4:	2b00      	cmp	r3, #0
1a0019e6:	bf08      	it	eq
1a0019e8:	2a32      	cmpeq	r2, #50	; 0x32
1a0019ea:	d227      	bcs.n	1a001a3c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0019ec:	4b14      	ldr	r3, [pc, #80]	; (1a001a40 <tickInit+0x6c>)
1a0019ee:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0019f2:	4b14      	ldr	r3, [pc, #80]	; (1a001a44 <tickInit+0x70>)
1a0019f4:	681b      	ldr	r3, [r3, #0]
1a0019f6:	fba3 4500 	umull	r4, r5, r3, r0
1a0019fa:	fb03 5501 	mla	r5, r3, r1, r5
1a0019fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001a02:	2300      	movs	r3, #0
1a001a04:	4620      	mov	r0, r4
1a001a06:	4629      	mov	r1, r5
1a001a08:	f000 f9da 	bl	1a001dc0 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001a0c:	3801      	subs	r0, #1
1a001a0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001a12:	d209      	bcs.n	1a001a28 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001a14:	4b0c      	ldr	r3, [pc, #48]	; (1a001a48 <tickInit+0x74>)
1a001a16:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001a18:	4a0c      	ldr	r2, [pc, #48]	; (1a001a4c <tickInit+0x78>)
1a001a1a:	21e0      	movs	r1, #224	; 0xe0
1a001a1c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001a20:	2200      	movs	r2, #0
1a001a22:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001a24:	2207      	movs	r2, #7
1a001a26:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001a28:	2001      	movs	r0, #1
1a001a2a:	f7ff ffc7 	bl	1a0019bc <tickPowerSet>
      bool_t ret_val = 1;
1a001a2e:	2001      	movs	r0, #1
}
1a001a30:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001a32:	2000      	movs	r0, #0
1a001a34:	f7ff ffc2 	bl	1a0019bc <tickPowerSet>
         ret_val = 0;
1a001a38:	2000      	movs	r0, #0
1a001a3a:	e7f9      	b.n	1a001a30 <tickInit+0x5c>
            ret_val = 0;
1a001a3c:	2000      	movs	r0, #0
1a001a3e:	e7f7      	b.n	1a001a30 <tickInit+0x5c>
1a001a40:	10000848 	.word	0x10000848
1a001a44:	10000870 	.word	0x10000870
1a001a48:	e000e010 	.word	0xe000e010
1a001a4c:	e000ed00 	.word	0xe000ed00

1a001a50 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001a50:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001a54:	4908      	ldr	r1, [pc, #32]	; (1a001a78 <SysTick_Handler+0x28>)
1a001a56:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001a5a:	f112 0b01 	adds.w	fp, r2, #1
1a001a5e:	f143 0c00 	adc.w	ip, r3, #0
1a001a62:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001a66:	4b05      	ldr	r3, [pc, #20]	; (1a001a7c <SysTick_Handler+0x2c>)
1a001a68:	681b      	ldr	r3, [r3, #0]
1a001a6a:	b113      	cbz	r3, 1a001a72 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001a6c:	4a04      	ldr	r2, [pc, #16]	; (1a001a80 <SysTick_Handler+0x30>)
1a001a6e:	6810      	ldr	r0, [r2, #0]
1a001a70:	4798      	blx	r3
   }
}
1a001a72:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001a76:	bf00      	nop
1a001a78:	10000860 	.word	0x10000860
1a001a7c:	10000868 	.word	0x10000868
1a001a80:	1000085c 	.word	0x1000085c

1a001a84 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a001a84:	b538      	push	{r3, r4, r5, lr}
1a001a86:	4604      	mov	r4, r0
1a001a88:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001a8a:	4b08      	ldr	r3, [pc, #32]	; (1a001aac <i2cHardwareInit+0x28>)
1a001a8c:	f640 0208 	movw	r2, #2056	; 0x808
1a001a90:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a001a94:	f7ff fedc 	bl	1a001850 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a001a98:	4629      	mov	r1, r5
1a001a9a:	4620      	mov	r0, r4
1a001a9c:	f7ff feea 	bl	1a001874 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a001aa0:	4903      	ldr	r1, [pc, #12]	; (1a001ab0 <i2cHardwareInit+0x2c>)
1a001aa2:	4620      	mov	r0, r4
1a001aa4:	f7ff ff02 	bl	1a0018ac <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001aa8:	2001      	movs	r0, #1
1a001aaa:	bd38      	pop	{r3, r4, r5, pc}
1a001aac:	40086000 	.word	0x40086000
1a001ab0:	1a001925 	.word	0x1a001925

1a001ab4 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a001ab4:	b108      	cbz	r0, 1a001aba <i2cHardwareWrite+0x6>
      return FALSE;
1a001ab6:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a001ab8:	4770      	bx	lr
{
1a001aba:	b500      	push	{lr}
1a001abc:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a001abe:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001ac2:	2100      	movs	r1, #0
1a001ac4:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001ac8:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a001acc:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a001ace:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a001ad2:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a001ad4:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001ad8:	4669      	mov	r1, sp
1a001ada:	4804      	ldr	r0, [pc, #16]	; (1a001aec <i2cHardwareWrite+0x38>)
1a001adc:	f7ff fdab 	bl	1a001636 <Chip_I2CM_XferBlocking>
1a001ae0:	b100      	cbz	r0, 1a001ae4 <i2cHardwareWrite+0x30>
   return TRUE;
1a001ae2:	2001      	movs	r0, #1
}
1a001ae4:	b005      	add	sp, #20
1a001ae6:	f85d fb04 	ldr.w	pc, [sp], #4
1a001aea:	bf00      	nop
1a001aec:	400a1000 	.word	0x400a1000

1a001af0 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001af0:	b108      	cbz	r0, 1a001af6 <i2cInit+0x6>
      return FALSE;
1a001af2:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a001af4:	4770      	bx	lr
{
1a001af6:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a001af8:	f7ff ffc4 	bl	1a001a84 <i2cHardwareInit>
}
1a001afc:	bd08      	pop	{r3, pc}

1a001afe <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001afe:	b108      	cbz	r0, 1a001b04 <i2cWrite+0x6>
      return FALSE;
1a001b00:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a001b02:	4770      	bx	lr
{
1a001b04:	b510      	push	{r4, lr}
1a001b06:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a001b08:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a001b0c:	9400      	str	r4, [sp, #0]
1a001b0e:	f7ff ffd1 	bl	1a001ab4 <i2cHardwareWrite>
}
1a001b12:	b002      	add	sp, #8
1a001b14:	bd10      	pop	{r4, pc}
1a001b16:	Address 0x000000001a001b16 is out of bounds.


1a001b18 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001b18:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001b1a:	4d0b      	ldr	r5, [pc, #44]	; (1a001b48 <gpioObtainPinInit+0x30>)
1a001b1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001b20:	182c      	adds	r4, r5, r0
1a001b22:	5628      	ldrsb	r0, [r5, r0]
1a001b24:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001b26:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001b2a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001b2c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001b30:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001b32:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001b36:	9b02      	ldr	r3, [sp, #8]
1a001b38:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001b3a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001b3e:	9b03      	ldr	r3, [sp, #12]
1a001b40:	701a      	strb	r2, [r3, #0]
}
1a001b42:	bc30      	pop	{r4, r5}
1a001b44:	4770      	bx	lr
1a001b46:	bf00      	nop
1a001b48:	1a0024c4 	.word	0x1a0024c4

1a001b4c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001b4c:	f110 0f02 	cmn.w	r0, #2
1a001b50:	f000 80c7 	beq.w	1a001ce2 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001b54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b58:	f000 80c5 	beq.w	1a001ce6 <gpioInit+0x19a>
{
1a001b5c:	b570      	push	{r4, r5, r6, lr}
1a001b5e:	b084      	sub	sp, #16
1a001b60:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001b62:	2300      	movs	r3, #0
1a001b64:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001b68:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001b6c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001b70:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001b74:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001b78:	f10d 030b 	add.w	r3, sp, #11
1a001b7c:	9301      	str	r3, [sp, #4]
1a001b7e:	ab03      	add	r3, sp, #12
1a001b80:	9300      	str	r3, [sp, #0]
1a001b82:	f10d 030d 	add.w	r3, sp, #13
1a001b86:	f10d 020e 	add.w	r2, sp, #14
1a001b8a:	f10d 010f 	add.w	r1, sp, #15
1a001b8e:	f7ff ffc3 	bl	1a001b18 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001b92:	2c05      	cmp	r4, #5
1a001b94:	f200 80a9 	bhi.w	1a001cea <gpioInit+0x19e>
1a001b98:	e8df f004 	tbb	[pc, r4]
1a001b9c:	45278109 	.word	0x45278109
1a001ba0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001ba2:	4853      	ldr	r0, [pc, #332]	; (1a001cf0 <gpioInit+0x1a4>)
1a001ba4:	f7ff fd59 	bl	1a00165a <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001ba8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001baa:	b004      	add	sp, #16
1a001bac:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001bae:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001bb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bb6:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001bba:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001bbe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bc2:	494c      	ldr	r1, [pc, #304]	; (1a001cf4 <gpioInit+0x1a8>)
1a001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001bc8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001bcc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001bd0:	2001      	movs	r0, #1
1a001bd2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001bd6:	4c46      	ldr	r4, [pc, #280]	; (1a001cf0 <gpioInit+0x1a4>)
1a001bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001bdc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001be0:	ea22 0201 	bic.w	r2, r2, r1
1a001be4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001be8:	e7df      	b.n	1a001baa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001bea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001bee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bf2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001bf6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001bfa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bfe:	493d      	ldr	r1, [pc, #244]	; (1a001cf4 <gpioInit+0x1a8>)
1a001c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c04:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c08:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c0c:	2001      	movs	r0, #1
1a001c0e:	fa00 f102 	lsl.w	r1, r0, r2
1a001c12:	4c37      	ldr	r4, [pc, #220]	; (1a001cf0 <gpioInit+0x1a4>)
1a001c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c18:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c1c:	ea22 0201 	bic.w	r2, r2, r1
1a001c20:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c24:	e7c1      	b.n	1a001baa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c26:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c2e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c32:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001c36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c3a:	492e      	ldr	r1, [pc, #184]	; (1a001cf4 <gpioInit+0x1a8>)
1a001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c40:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c44:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c48:	2001      	movs	r0, #1
1a001c4a:	fa00 f102 	lsl.w	r1, r0, r2
1a001c4e:	4c28      	ldr	r4, [pc, #160]	; (1a001cf0 <gpioInit+0x1a4>)
1a001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c54:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c58:	ea22 0201 	bic.w	r2, r2, r1
1a001c5c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c60:	e7a3      	b.n	1a001baa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c62:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c66:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c6a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c6e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001c72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c76:	491f      	ldr	r1, [pc, #124]	; (1a001cf4 <gpioInit+0x1a8>)
1a001c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c80:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c84:	2001      	movs	r0, #1
1a001c86:	fa00 f102 	lsl.w	r1, r0, r2
1a001c8a:	4c19      	ldr	r4, [pc, #100]	; (1a001cf0 <gpioInit+0x1a4>)
1a001c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c90:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c94:	ea22 0201 	bic.w	r2, r2, r1
1a001c98:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c9c:	e785      	b.n	1a001baa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c9e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ca2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ca6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001caa:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001cae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001cb2:	4910      	ldr	r1, [pc, #64]	; (1a001cf4 <gpioInit+0x1a8>)
1a001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001cb8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001cbc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001cc0:	2001      	movs	r0, #1
1a001cc2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001cc6:	4b0a      	ldr	r3, [pc, #40]	; (1a001cf0 <gpioInit+0x1a4>)
1a001cc8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001ccc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001cd0:	4331      	orrs	r1, r6
1a001cd2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001cd6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001cd8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001cdc:	2100      	movs	r1, #0
1a001cde:	5499      	strb	r1, [r3, r2]
1a001ce0:	e763      	b.n	1a001baa <gpioInit+0x5e>
	  return FALSE;
1a001ce2:	2000      	movs	r0, #0
1a001ce4:	4770      	bx	lr
	  return FALSE;
1a001ce6:	2000      	movs	r0, #0
}
1a001ce8:	4770      	bx	lr
      ret_val = 0;
1a001cea:	2000      	movs	r0, #0
1a001cec:	e75d      	b.n	1a001baa <gpioInit+0x5e>
1a001cee:	bf00      	nop
1a001cf0:	400f4000 	.word	0x400f4000
1a001cf4:	40086000 	.word	0x40086000

1a001cf8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001cf8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001cfa:	4b04      	ldr	r3, [pc, #16]	; (1a001d0c <USB0_IRQHandler+0x14>)
1a001cfc:	681b      	ldr	r3, [r3, #0]
1a001cfe:	681b      	ldr	r3, [r3, #0]
1a001d00:	68db      	ldr	r3, [r3, #12]
1a001d02:	4a03      	ldr	r2, [pc, #12]	; (1a001d10 <USB0_IRQHandler+0x18>)
1a001d04:	6810      	ldr	r0, [r2, #0]
1a001d06:	4798      	blx	r3
}
1a001d08:	bd08      	pop	{r3, pc}
1a001d0a:	bf00      	nop
1a001d0c:	10000874 	.word	0x10000874
1a001d10:	1000086c 	.word	0x1000086c

1a001d14 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001d14:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001d16:	f7ff fb55 	bl	1a0013c4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001d1a:	4b1a      	ldr	r3, [pc, #104]	; (1a001d84 <boardInit+0x70>)
1a001d1c:	6818      	ldr	r0, [r3, #0]
1a001d1e:	f7ff fe39 	bl	1a001994 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001d22:	2001      	movs	r0, #1
1a001d24:	2100      	movs	r1, #0
1a001d26:	f7ff fe55 	bl	1a0019d4 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001d2a:	2105      	movs	r1, #5
1a001d2c:	2000      	movs	r0, #0
1a001d2e:	f7ff ff0d 	bl	1a001b4c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001d32:	2100      	movs	r1, #0
1a001d34:	2024      	movs	r0, #36	; 0x24
1a001d36:	f7ff ff09 	bl	1a001b4c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001d3a:	2100      	movs	r1, #0
1a001d3c:	2025      	movs	r0, #37	; 0x25
1a001d3e:	f7ff ff05 	bl	1a001b4c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001d42:	2100      	movs	r1, #0
1a001d44:	2026      	movs	r0, #38	; 0x26
1a001d46:	f7ff ff01 	bl	1a001b4c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001d4a:	2100      	movs	r1, #0
1a001d4c:	2027      	movs	r0, #39	; 0x27
1a001d4e:	f7ff fefd 	bl	1a001b4c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001d52:	2101      	movs	r1, #1
1a001d54:	2028      	movs	r0, #40	; 0x28
1a001d56:	f7ff fef9 	bl	1a001b4c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001d5a:	2101      	movs	r1, #1
1a001d5c:	2029      	movs	r0, #41	; 0x29
1a001d5e:	f7ff fef5 	bl	1a001b4c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001d62:	2101      	movs	r1, #1
1a001d64:	202a      	movs	r0, #42	; 0x2a
1a001d66:	f7ff fef1 	bl	1a001b4c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001d6a:	2101      	movs	r1, #1
1a001d6c:	202b      	movs	r0, #43	; 0x2b
1a001d6e:	f7ff feed 	bl	1a001b4c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001d72:	2101      	movs	r1, #1
1a001d74:	202c      	movs	r0, #44	; 0x2c
1a001d76:	f7ff fee9 	bl	1a001b4c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001d7a:	2101      	movs	r1, #1
1a001d7c:	202d      	movs	r0, #45	; 0x2d
1a001d7e:	f7ff fee5 	bl	1a001b4c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001d82:	bd08      	pop	{r3, pc}
1a001d84:	10000870 	.word	0x10000870

1a001d88 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001d8c:	4680      	mov	r8, r0
1a001d8e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001d90:	f7ff fe0e 	bl	1a0019b0 <tickRead>
1a001d94:	4606      	mov	r6, r0
1a001d96:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001d98:	f7ff fe0a 	bl	1a0019b0 <tickRead>
1a001d9c:	1b84      	subs	r4, r0, r6
1a001d9e:	eb61 0507 	sbc.w	r5, r1, r7
1a001da2:	4b06      	ldr	r3, [pc, #24]	; (1a001dbc <delay+0x34>)
1a001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001da8:	4640      	mov	r0, r8
1a001daa:	4649      	mov	r1, r9
1a001dac:	f000 f808 	bl	1a001dc0 <__aeabi_uldivmod>
1a001db0:	428d      	cmp	r5, r1
1a001db2:	bf08      	it	eq
1a001db4:	4284      	cmpeq	r4, r0
1a001db6:	d3ef      	bcc.n	1a001d98 <delay+0x10>
}
1a001db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001dbc:	10000848 	.word	0x10000848

1a001dc0 <__aeabi_uldivmod>:
1a001dc0:	b953      	cbnz	r3, 1a001dd8 <__aeabi_uldivmod+0x18>
1a001dc2:	b94a      	cbnz	r2, 1a001dd8 <__aeabi_uldivmod+0x18>
1a001dc4:	2900      	cmp	r1, #0
1a001dc6:	bf08      	it	eq
1a001dc8:	2800      	cmpeq	r0, #0
1a001dca:	bf1c      	itt	ne
1a001dcc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001dd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001dd4:	f000 b972 	b.w	1a0020bc <__aeabi_idiv0>
1a001dd8:	f1ad 0c08 	sub.w	ip, sp, #8
1a001ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001de0:	f000 f806 	bl	1a001df0 <__udivmoddi4>
1a001de4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001dec:	b004      	add	sp, #16
1a001dee:	4770      	bx	lr

1a001df0 <__udivmoddi4>:
1a001df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001df4:	9e08      	ldr	r6, [sp, #32]
1a001df6:	4604      	mov	r4, r0
1a001df8:	4688      	mov	r8, r1
1a001dfa:	2b00      	cmp	r3, #0
1a001dfc:	d14b      	bne.n	1a001e96 <__udivmoddi4+0xa6>
1a001dfe:	428a      	cmp	r2, r1
1a001e00:	4615      	mov	r5, r2
1a001e02:	d967      	bls.n	1a001ed4 <__udivmoddi4+0xe4>
1a001e04:	fab2 f282 	clz	r2, r2
1a001e08:	b14a      	cbz	r2, 1a001e1e <__udivmoddi4+0x2e>
1a001e0a:	f1c2 0720 	rsb	r7, r2, #32
1a001e0e:	fa01 f302 	lsl.w	r3, r1, r2
1a001e12:	fa20 f707 	lsr.w	r7, r0, r7
1a001e16:	4095      	lsls	r5, r2
1a001e18:	ea47 0803 	orr.w	r8, r7, r3
1a001e1c:	4094      	lsls	r4, r2
1a001e1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e22:	0c23      	lsrs	r3, r4, #16
1a001e24:	fbb8 f7fe 	udiv	r7, r8, lr
1a001e28:	fa1f fc85 	uxth.w	ip, r5
1a001e2c:	fb0e 8817 	mls	r8, lr, r7, r8
1a001e30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001e34:	fb07 f10c 	mul.w	r1, r7, ip
1a001e38:	4299      	cmp	r1, r3
1a001e3a:	d909      	bls.n	1a001e50 <__udivmoddi4+0x60>
1a001e3c:	18eb      	adds	r3, r5, r3
1a001e3e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001e42:	f080 811b 	bcs.w	1a00207c <__udivmoddi4+0x28c>
1a001e46:	4299      	cmp	r1, r3
1a001e48:	f240 8118 	bls.w	1a00207c <__udivmoddi4+0x28c>
1a001e4c:	3f02      	subs	r7, #2
1a001e4e:	442b      	add	r3, r5
1a001e50:	1a5b      	subs	r3, r3, r1
1a001e52:	b2a4      	uxth	r4, r4
1a001e54:	fbb3 f0fe 	udiv	r0, r3, lr
1a001e58:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e60:	fb00 fc0c 	mul.w	ip, r0, ip
1a001e64:	45a4      	cmp	ip, r4
1a001e66:	d909      	bls.n	1a001e7c <__udivmoddi4+0x8c>
1a001e68:	192c      	adds	r4, r5, r4
1a001e6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001e6e:	f080 8107 	bcs.w	1a002080 <__udivmoddi4+0x290>
1a001e72:	45a4      	cmp	ip, r4
1a001e74:	f240 8104 	bls.w	1a002080 <__udivmoddi4+0x290>
1a001e78:	3802      	subs	r0, #2
1a001e7a:	442c      	add	r4, r5
1a001e7c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001e80:	eba4 040c 	sub.w	r4, r4, ip
1a001e84:	2700      	movs	r7, #0
1a001e86:	b11e      	cbz	r6, 1a001e90 <__udivmoddi4+0xa0>
1a001e88:	40d4      	lsrs	r4, r2
1a001e8a:	2300      	movs	r3, #0
1a001e8c:	e9c6 4300 	strd	r4, r3, [r6]
1a001e90:	4639      	mov	r1, r7
1a001e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e96:	428b      	cmp	r3, r1
1a001e98:	d909      	bls.n	1a001eae <__udivmoddi4+0xbe>
1a001e9a:	2e00      	cmp	r6, #0
1a001e9c:	f000 80eb 	beq.w	1a002076 <__udivmoddi4+0x286>
1a001ea0:	2700      	movs	r7, #0
1a001ea2:	e9c6 0100 	strd	r0, r1, [r6]
1a001ea6:	4638      	mov	r0, r7
1a001ea8:	4639      	mov	r1, r7
1a001eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001eae:	fab3 f783 	clz	r7, r3
1a001eb2:	2f00      	cmp	r7, #0
1a001eb4:	d147      	bne.n	1a001f46 <__udivmoddi4+0x156>
1a001eb6:	428b      	cmp	r3, r1
1a001eb8:	d302      	bcc.n	1a001ec0 <__udivmoddi4+0xd0>
1a001eba:	4282      	cmp	r2, r0
1a001ebc:	f200 80fa 	bhi.w	1a0020b4 <__udivmoddi4+0x2c4>
1a001ec0:	1a84      	subs	r4, r0, r2
1a001ec2:	eb61 0303 	sbc.w	r3, r1, r3
1a001ec6:	2001      	movs	r0, #1
1a001ec8:	4698      	mov	r8, r3
1a001eca:	2e00      	cmp	r6, #0
1a001ecc:	d0e0      	beq.n	1a001e90 <__udivmoddi4+0xa0>
1a001ece:	e9c6 4800 	strd	r4, r8, [r6]
1a001ed2:	e7dd      	b.n	1a001e90 <__udivmoddi4+0xa0>
1a001ed4:	b902      	cbnz	r2, 1a001ed8 <__udivmoddi4+0xe8>
1a001ed6:	deff      	udf	#255	; 0xff
1a001ed8:	fab2 f282 	clz	r2, r2
1a001edc:	2a00      	cmp	r2, #0
1a001ede:	f040 808f 	bne.w	1a002000 <__udivmoddi4+0x210>
1a001ee2:	1b49      	subs	r1, r1, r5
1a001ee4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ee8:	fa1f f885 	uxth.w	r8, r5
1a001eec:	2701      	movs	r7, #1
1a001eee:	fbb1 fcfe 	udiv	ip, r1, lr
1a001ef2:	0c23      	lsrs	r3, r4, #16
1a001ef4:	fb0e 111c 	mls	r1, lr, ip, r1
1a001ef8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001efc:	fb08 f10c 	mul.w	r1, r8, ip
1a001f00:	4299      	cmp	r1, r3
1a001f02:	d907      	bls.n	1a001f14 <__udivmoddi4+0x124>
1a001f04:	18eb      	adds	r3, r5, r3
1a001f06:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001f0a:	d202      	bcs.n	1a001f12 <__udivmoddi4+0x122>
1a001f0c:	4299      	cmp	r1, r3
1a001f0e:	f200 80cd 	bhi.w	1a0020ac <__udivmoddi4+0x2bc>
1a001f12:	4684      	mov	ip, r0
1a001f14:	1a59      	subs	r1, r3, r1
1a001f16:	b2a3      	uxth	r3, r4
1a001f18:	fbb1 f0fe 	udiv	r0, r1, lr
1a001f1c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001f20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001f24:	fb08 f800 	mul.w	r8, r8, r0
1a001f28:	45a0      	cmp	r8, r4
1a001f2a:	d907      	bls.n	1a001f3c <__udivmoddi4+0x14c>
1a001f2c:	192c      	adds	r4, r5, r4
1a001f2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001f32:	d202      	bcs.n	1a001f3a <__udivmoddi4+0x14a>
1a001f34:	45a0      	cmp	r8, r4
1a001f36:	f200 80b6 	bhi.w	1a0020a6 <__udivmoddi4+0x2b6>
1a001f3a:	4618      	mov	r0, r3
1a001f3c:	eba4 0408 	sub.w	r4, r4, r8
1a001f40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001f44:	e79f      	b.n	1a001e86 <__udivmoddi4+0x96>
1a001f46:	f1c7 0c20 	rsb	ip, r7, #32
1a001f4a:	40bb      	lsls	r3, r7
1a001f4c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a001f50:	ea4e 0e03 	orr.w	lr, lr, r3
1a001f54:	fa01 f407 	lsl.w	r4, r1, r7
1a001f58:	fa20 f50c 	lsr.w	r5, r0, ip
1a001f5c:	fa21 f30c 	lsr.w	r3, r1, ip
1a001f60:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a001f64:	4325      	orrs	r5, r4
1a001f66:	fbb3 f9f8 	udiv	r9, r3, r8
1a001f6a:	0c2c      	lsrs	r4, r5, #16
1a001f6c:	fb08 3319 	mls	r3, r8, r9, r3
1a001f70:	fa1f fa8e 	uxth.w	sl, lr
1a001f74:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a001f78:	fb09 f40a 	mul.w	r4, r9, sl
1a001f7c:	429c      	cmp	r4, r3
1a001f7e:	fa02 f207 	lsl.w	r2, r2, r7
1a001f82:	fa00 f107 	lsl.w	r1, r0, r7
1a001f86:	d90b      	bls.n	1a001fa0 <__udivmoddi4+0x1b0>
1a001f88:	eb1e 0303 	adds.w	r3, lr, r3
1a001f8c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001f90:	f080 8087 	bcs.w	1a0020a2 <__udivmoddi4+0x2b2>
1a001f94:	429c      	cmp	r4, r3
1a001f96:	f240 8084 	bls.w	1a0020a2 <__udivmoddi4+0x2b2>
1a001f9a:	f1a9 0902 	sub.w	r9, r9, #2
1a001f9e:	4473      	add	r3, lr
1a001fa0:	1b1b      	subs	r3, r3, r4
1a001fa2:	b2ad      	uxth	r5, r5
1a001fa4:	fbb3 f0f8 	udiv	r0, r3, r8
1a001fa8:	fb08 3310 	mls	r3, r8, r0, r3
1a001fac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a001fb0:	fb00 fa0a 	mul.w	sl, r0, sl
1a001fb4:	45a2      	cmp	sl, r4
1a001fb6:	d908      	bls.n	1a001fca <__udivmoddi4+0x1da>
1a001fb8:	eb1e 0404 	adds.w	r4, lr, r4
1a001fbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001fc0:	d26b      	bcs.n	1a00209a <__udivmoddi4+0x2aa>
1a001fc2:	45a2      	cmp	sl, r4
1a001fc4:	d969      	bls.n	1a00209a <__udivmoddi4+0x2aa>
1a001fc6:	3802      	subs	r0, #2
1a001fc8:	4474      	add	r4, lr
1a001fca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001fce:	fba0 8902 	umull	r8, r9, r0, r2
1a001fd2:	eba4 040a 	sub.w	r4, r4, sl
1a001fd6:	454c      	cmp	r4, r9
1a001fd8:	46c2      	mov	sl, r8
1a001fda:	464b      	mov	r3, r9
1a001fdc:	d354      	bcc.n	1a002088 <__udivmoddi4+0x298>
1a001fde:	d051      	beq.n	1a002084 <__udivmoddi4+0x294>
1a001fe0:	2e00      	cmp	r6, #0
1a001fe2:	d069      	beq.n	1a0020b8 <__udivmoddi4+0x2c8>
1a001fe4:	ebb1 050a 	subs.w	r5, r1, sl
1a001fe8:	eb64 0403 	sbc.w	r4, r4, r3
1a001fec:	fa04 fc0c 	lsl.w	ip, r4, ip
1a001ff0:	40fd      	lsrs	r5, r7
1a001ff2:	40fc      	lsrs	r4, r7
1a001ff4:	ea4c 0505 	orr.w	r5, ip, r5
1a001ff8:	e9c6 5400 	strd	r5, r4, [r6]
1a001ffc:	2700      	movs	r7, #0
1a001ffe:	e747      	b.n	1a001e90 <__udivmoddi4+0xa0>
1a002000:	f1c2 0320 	rsb	r3, r2, #32
1a002004:	fa20 f703 	lsr.w	r7, r0, r3
1a002008:	4095      	lsls	r5, r2
1a00200a:	fa01 f002 	lsl.w	r0, r1, r2
1a00200e:	fa21 f303 	lsr.w	r3, r1, r3
1a002012:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002016:	4338      	orrs	r0, r7
1a002018:	0c01      	lsrs	r1, r0, #16
1a00201a:	fbb3 f7fe 	udiv	r7, r3, lr
1a00201e:	fa1f f885 	uxth.w	r8, r5
1a002022:	fb0e 3317 	mls	r3, lr, r7, r3
1a002026:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00202a:	fb07 f308 	mul.w	r3, r7, r8
1a00202e:	428b      	cmp	r3, r1
1a002030:	fa04 f402 	lsl.w	r4, r4, r2
1a002034:	d907      	bls.n	1a002046 <__udivmoddi4+0x256>
1a002036:	1869      	adds	r1, r5, r1
1a002038:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00203c:	d22f      	bcs.n	1a00209e <__udivmoddi4+0x2ae>
1a00203e:	428b      	cmp	r3, r1
1a002040:	d92d      	bls.n	1a00209e <__udivmoddi4+0x2ae>
1a002042:	3f02      	subs	r7, #2
1a002044:	4429      	add	r1, r5
1a002046:	1acb      	subs	r3, r1, r3
1a002048:	b281      	uxth	r1, r0
1a00204a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00204e:	fb0e 3310 	mls	r3, lr, r0, r3
1a002052:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002056:	fb00 f308 	mul.w	r3, r0, r8
1a00205a:	428b      	cmp	r3, r1
1a00205c:	d907      	bls.n	1a00206e <__udivmoddi4+0x27e>
1a00205e:	1869      	adds	r1, r5, r1
1a002060:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002064:	d217      	bcs.n	1a002096 <__udivmoddi4+0x2a6>
1a002066:	428b      	cmp	r3, r1
1a002068:	d915      	bls.n	1a002096 <__udivmoddi4+0x2a6>
1a00206a:	3802      	subs	r0, #2
1a00206c:	4429      	add	r1, r5
1a00206e:	1ac9      	subs	r1, r1, r3
1a002070:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002074:	e73b      	b.n	1a001eee <__udivmoddi4+0xfe>
1a002076:	4637      	mov	r7, r6
1a002078:	4630      	mov	r0, r6
1a00207a:	e709      	b.n	1a001e90 <__udivmoddi4+0xa0>
1a00207c:	4607      	mov	r7, r0
1a00207e:	e6e7      	b.n	1a001e50 <__udivmoddi4+0x60>
1a002080:	4618      	mov	r0, r3
1a002082:	e6fb      	b.n	1a001e7c <__udivmoddi4+0x8c>
1a002084:	4541      	cmp	r1, r8
1a002086:	d2ab      	bcs.n	1a001fe0 <__udivmoddi4+0x1f0>
1a002088:	ebb8 0a02 	subs.w	sl, r8, r2
1a00208c:	eb69 020e 	sbc.w	r2, r9, lr
1a002090:	3801      	subs	r0, #1
1a002092:	4613      	mov	r3, r2
1a002094:	e7a4      	b.n	1a001fe0 <__udivmoddi4+0x1f0>
1a002096:	4660      	mov	r0, ip
1a002098:	e7e9      	b.n	1a00206e <__udivmoddi4+0x27e>
1a00209a:	4618      	mov	r0, r3
1a00209c:	e795      	b.n	1a001fca <__udivmoddi4+0x1da>
1a00209e:	4667      	mov	r7, ip
1a0020a0:	e7d1      	b.n	1a002046 <__udivmoddi4+0x256>
1a0020a2:	4681      	mov	r9, r0
1a0020a4:	e77c      	b.n	1a001fa0 <__udivmoddi4+0x1b0>
1a0020a6:	3802      	subs	r0, #2
1a0020a8:	442c      	add	r4, r5
1a0020aa:	e747      	b.n	1a001f3c <__udivmoddi4+0x14c>
1a0020ac:	f1ac 0c02 	sub.w	ip, ip, #2
1a0020b0:	442b      	add	r3, r5
1a0020b2:	e72f      	b.n	1a001f14 <__udivmoddi4+0x124>
1a0020b4:	4638      	mov	r0, r7
1a0020b6:	e708      	b.n	1a001eca <__udivmoddi4+0xda>
1a0020b8:	4637      	mov	r7, r6
1a0020ba:	e6e9      	b.n	1a001e90 <__udivmoddi4+0xa0>

1a0020bc <__aeabi_idiv0>:
1a0020bc:	4770      	bx	lr
1a0020be:	bf00      	nop

1a0020c0 <__libc_init_array>:
1a0020c0:	b570      	push	{r4, r5, r6, lr}
1a0020c2:	4e0d      	ldr	r6, [pc, #52]	; (1a0020f8 <__libc_init_array+0x38>)
1a0020c4:	4c0d      	ldr	r4, [pc, #52]	; (1a0020fc <__libc_init_array+0x3c>)
1a0020c6:	1ba4      	subs	r4, r4, r6
1a0020c8:	10a4      	asrs	r4, r4, #2
1a0020ca:	2500      	movs	r5, #0
1a0020cc:	42a5      	cmp	r5, r4
1a0020ce:	d109      	bne.n	1a0020e4 <__libc_init_array+0x24>
1a0020d0:	4e0b      	ldr	r6, [pc, #44]	; (1a002100 <__libc_init_array+0x40>)
1a0020d2:	4c0c      	ldr	r4, [pc, #48]	; (1a002104 <__libc_init_array+0x44>)
1a0020d4:	f7fe fc67 	bl	1a0009a6 <_init>
1a0020d8:	1ba4      	subs	r4, r4, r6
1a0020da:	10a4      	asrs	r4, r4, #2
1a0020dc:	2500      	movs	r5, #0
1a0020de:	42a5      	cmp	r5, r4
1a0020e0:	d105      	bne.n	1a0020ee <__libc_init_array+0x2e>
1a0020e2:	bd70      	pop	{r4, r5, r6, pc}
1a0020e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0020e8:	4798      	blx	r3
1a0020ea:	3501      	adds	r5, #1
1a0020ec:	e7ee      	b.n	1a0020cc <__libc_init_array+0xc>
1a0020ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0020f2:	4798      	blx	r3
1a0020f4:	3501      	adds	r5, #1
1a0020f6:	e7f2      	b.n	1a0020de <__libc_init_array+0x1e>
1a0020f8:	1a0025ac 	.word	0x1a0025ac
1a0020fc:	1a0025ac 	.word	0x1a0025ac
1a002100:	1a0025ac 	.word	0x1a0025ac
1a002104:	1a0025b0 	.word	0x1a0025b0

1a002108 <memset>:
1a002108:	4402      	add	r2, r0
1a00210a:	4603      	mov	r3, r0
1a00210c:	4293      	cmp	r3, r2
1a00210e:	d100      	bne.n	1a002112 <memset+0xa>
1a002110:	4770      	bx	lr
1a002112:	f803 1b01 	strb.w	r1, [r3], #1
1a002116:	e7f9      	b.n	1a00210c <memset+0x4>

1a002118 <Font>:
1a002118:	4926 4949 0332 7f01 0301 403f 4040 1f3f     &III2.....?@@@?.
1a002128:	4020 1f20 403f 4038 633f 0814 6314 0403      @ .?@8@?c...c..
1a002138:	0478 6103 4959 434d 7f00 4141 0241 0804     x..aYIMC..AAA...
1a002148:	2010 4100 4141 047f 0102 0402 4040 4040     . .AAA......@@@@
1a002158:	0040 0703 0008 5420 7854 7f40 4428 3844     @..... TTx@.(DD8
1a002168:	4438 4444 3828 4444 7f28 5438 5454 0018     8DDD(8DD(.8TTT..
1a002178:	7e08 0209 a418 9ca4 7f78 0408 7804 4400     .~......x....x.D
1a002188:	407d 2000 4040 003d 107f 4428 0000 7f41     }@. @@=...(D..A.
1a002198:	0040 047c 0478 7c78 0408 7804 4438 4444     @.|.x.x|...x8DDD
1a0021a8:	fc38 2418 1824 2418 1824 7cfc 0408 0804     8..$$..$$..|....
1a0021b8:	5448 5454 0424 3f04 2444 403c 2040 1c7c     HTTT$..?D$<@@ |.
1a0021c8:	4020 1c20 403c 4030 443c 1028 4428 904c      @ .<@0@<D(.(DL.
1a0021d8:	9090 447c 5464 444c 0800 4136 0000 7700     ..|DdTLD..6A...w
1a0021e8:	0000 4100 0836 0200 0201 0204               ...A6.......

1a0021f4 <Font2>:
1a0021f4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
1a002204:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
1a002214:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
1a002224:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
1a002234:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
1a002244:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
1a002254:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
1a002264:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
1a002274:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
1a002284:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
1a002294:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
1a0022a4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
1a0022b4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
1a0022c4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
1a0022d4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
1a0022e4:	097f 0909 3e06 5141 5e21 097f 2919 ff46     .....>AQ!^...)F.
1a0022f4:	4543 4553 4320 396f 0000 0000 6f43 0039     CESE Co9....Co9.
1a002304:	7250 746f 636f 6c6f 736f 0000 6953 7473     Protocolos..Sist
1a002314:	6d65 2061 6564 0d0a 6f4d 696e 6f74 6572     ema de..Monitore
1a002324:	0a6f 410d 626d 6569 746e 6c61 0000 0000     o..Ambiental....
1a002334:	4f54 5252 4e45 0054 0059 0000 4544 204c     TORRENT.Y...DEL 
1a002344:	4156 4c4c 0045 ffff                         VALLE...

1a00234c <ExtRateIn>:
1a00234c:	0000 0000                                   ....

1a002350 <GpioButtons>:
1a002350:	0400 0800 0900 0901                         ........

1a002358 <GpioLeds>:
1a002358:	0005 0105 0205 0e00 0b01 0c01               ............

1a002364 <GpioPorts>:
1a002364:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a002374:	0802 ffff                                   ....

1a002378 <OscRateIn>:
1a002378:	1b00 00b7                                   ....

1a00237c <InitClkStates>:
1a00237c:	0f01 0101                                   ....

1a002380 <pinmuxing>:
1a002380:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a002390:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a0023a0:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a0023b0:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a0023c0:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a0023d0:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a0023e0:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a0023f0:	0206 0057                                   ..W.

1a0023f4 <UART_BClock>:
1a0023f4:	01c2 01a2 0182 0162                         ......b.

1a0023fc <UART_PClock>:
1a0023fc:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a00240c:	00ff 0000                                   ....

1a002410 <periph_to_base>:
1a002410:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002420:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a002430:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a002440:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a002450:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a002460:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a002470:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a00247c <InitClkStates>:
1a00247c:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a00248c:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a00249c:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0024ac:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0024bc:	111a 0001 111b 0001                         ........

1a0024c4 <gpioPinsInit>:
1a0024c4:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a0024d4:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a0024e4:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a0024f4:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a002504:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a002514:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a002524:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a002534:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a002544:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a002554:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a002564:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a002574:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a002584:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a002594:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a0025a4:	020b 000c 0c01 ffff                         ........
